/*

Для получения данных с кинопоиск используется https://kinopoiskapiunofficial.tech/ - получите API ключ 
Для получения данных Metacritic, Tomatoes, наград испольузется https://www.omdbapi.com/ - получите API ключ 

Можно использовать одиночный ключ или массив ключей, после получения API ключей передайте их как массивы через:
    window.RATINGS_PLUGIN_TOKENS && window.RATINGS_PLUGIN_TOKENS.OMDB_API_KEYS
Или просто введите ниже в коде плагина:
    var OMDB_API_KEYS = (window.RATINGS_PLUGIN_TOKENS && window.RATINGS_PLUGIN_TOKENS.OMDB_API_KEYS) || ['YOU_KEY']; // api ключи массивом
    var KP_API_KEYS   = (window.RATINGS_PLUGIN_TOKENS && window.RATINGS_PLUGIN_TOKENS.KP_API_KEYS)   || ['YOU_KEY']; // api ключи массивом

Для получения данных о качестве используется jacred парсер, по умолчанию плагин настроен на получение адреса и ключа вашего введеного jacred,
вы можете изменить это в переменных:
    var JACRED_PROTOCOL = 'https://'; // Протокол JacRed
    var JACRED_URL = Lampa.Storage.get('jackett_url'); // Адрес JacRed для получения информации о карточках без протокола (jacred.xyz)
    var JACRED_API_KEY = Lampa.Storage.get('jackett_key'); // api ключ JacRed

*/


(function() {
    'use strict';
  
    var star_svg = '<svg viewBox="5 5 54 54" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="white" stroke-width="2" d="M32 18.7461L36.2922 27.4159L46.2682 28.6834L38.9675 35.3631L40.7895 44.8469L32 40.2489L23.2105 44.8469L25.0325 35.3631L17.7318 28.6834L27.7078 27.4159L32 18.7461ZM32 23.2539L29.0241 29.2648L22.2682 30.1231L27.2075 34.6424L25.9567 41.1531L32 37.9918L38.0433 41.1531L36.7925 34.6424L41.7318 30.1231L34.9759 29.2648L32 23.2539Z"/><path fill="none" stroke="white" stroke-width="2" d="M32 9C19.2975 9 9 19.2975 9 32C9 44.7025 19.2975 55 32 55C44.7025 55 55 44.7025 55 32C55 19.2975 44.7025 9 32 9ZM7 32C7 18.1929 18.1929 7 32 7C45.8071 7 57 18.1929 57 32C57 45.8071 45.8071 57 32 57C18.1929 57 7 45.8071 7 32Z"/></svg>';
    var avg_svg = '<svg width="64" height="64" viewBox="10 10 44 44" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M31.4517 11.3659C31.8429 10.7366 32.7589 10.7366 33.1501 11.3659L40.2946 22.8568C40.4323 23.0782 40.651 23.2371 40.9041 23.2996L54.0403 26.5435C54.7598 26.7212 55.0428 27.5923 54.5652 28.1589L45.8445 38.5045C45.6764 38.7039 45.5929 38.961 45.6117 39.221L46.5858 52.7168C46.6392 53.4559 45.8982 53.9942 45.2117 53.7151L32.6776 48.6182C32.4361 48.52 32.1657 48.52 31.9242 48.6182L19.39 53.7151C18.7036 53.9942 17.9626 53.4559 18.016 52.7168L18.9901 39.221C19.0089 38.961 18.9253 38.7039 18.7573 38.5045L10.0366 28.1589C9.559 27.5923 9.84204 26.7212 10.5615 26.5435L23.6977 23.2996C23.9508 23.2371 24.1695 23.0782 24.3072 22.8568L31.4517 11.3659Z" fill="#FFDF6D"/><path fill-rule="evenodd" clip-rule="evenodd" d="M30.6024 10.8379C31.385 9.57926 33.2168 9.57926 33.9994 10.8379L41.1438 22.3288L54.2801 25.5727C55.7189 25.928 56.285 27.6702 55.3298 28.8034L46.6091 39.149L47.5832 52.6448C47.6899 54.123 46.208 55.1997 44.8351 54.6414L32.3009 49.5445L19.7667 54.6414C18.3938 55.1997 16.9118 54.123 17.0185 52.6448L17.9927 39.149L9.272 28.8034C8.3168 27.6702 8.88287 25.928 10.3217 25.5727L23.4579 22.3288L30.6024 10.8379ZM39.4454 23.3848L32.3009 11.8939L25.1564 23.3848C24.8811 23.8276 24.4437 24.1454 23.9374 24.2704L10.8012 27.5144L19.5219 37.86C19.858 38.2587 20.0251 38.7729 19.9875 39.293L19.0134 52.7888L31.5475 47.6919C32.0306 47.4954 32.5712 47.4954 33.0543 47.6919L45.5884 52.7888L44.6143 39.293C44.5767 38.7729 44.7438 38.2587 45.0799 37.86L53.8006 27.5144L40.6643 24.2704C40.1581 24.1454 39.7207 23.8276 39.4454 23.3848Z" fill="black"/></svg>';
    var oscars_svg = '<svg xmlns="http://www.w3.org/2000/svg" width="255" height="255" viewBox="0 0 255 255">  <g transform="translate(77.561474, 0)">    <path      fill="#f0c60b"      d="M 2.2993819,243.56494 C -1.1026591,241.60427 -0.9385111,241.52608 4.2015339,240.00521 L 8.0440949,239.03157 L 8.2617039,226.55609 C 8.2617039,226.55609 11.280223,225.67709 12.312216,225.53163 C 14.427728,225.23345 19.775685,224.14614 24.36752,223.70487 C 28.959355,223.26362 33.61375,223.36451 33.61375,223.36451 C 35.705809,217.55816 35.821325,205.39069 32.708355,191.27168 C 31.382336,185.25747 31.024339,182.15035 31.881607,170.34849 C 32.785302,157.90746 32.369435,156.25117 30.366705,149.83556 C 28.541293,143.98797 27.847485,140.74011 27.857558,129.73289 C 27.864165,122.51234 28.704973,114.4525 29.305577,111.82215 C 30.637862,105.98738 29.322662,102.61956 24.601519,99.776463 C 19.225421,96.538956 17.369413,91.741154 17.621345,81.732632 C 17.78083,75.396835 17.297536,71.093691 15.794836,65.469737 C 13.38634,56.455791 13.82,52.944489 17.616516,50.719769 C 19.063909,49.871611 24.769691,47.179405 30.296033,44.737088 C 37.409114,41.593526 40.624681,39.697365 41.305143,38.245219 C 41.992829,36.77765 42.203737,33.867969 40.57434,28.286206 C 36.592772,14.6467 40.081451,9.2361905 49.839332,9.2361905 C 59.597214,9.2361905 63.429892,14.937624 59.104325,28.286206 C 57.307519,33.831098 57.685835,36.77765 58.373522,38.245219 C 59.053984,39.697365 62.269551,41.593526 69.382633,44.737088 C 74.908976,47.179405 80.614757,49.871611 82.062147,50.719769 C 85.858667,52.944489 86.292317,56.455791 83.883817,65.469737 C 82.381127,71.093691 81.897837,75.396835 82.057317,81.732632 C 82.309247,91.741154 80.453237,96.538956 75.077146,99.776463 C 70.356003,102.61956 69.040803,105.98738 70.37309,111.82215 C 70.973696,114.4525 71.642498,122.36687 71.649112,129.58743 C 71.659183,140.59465 71.13737,143.98797 69.31196,149.83556 C 67.30923,156.25117 66.864688,157.90897 67.797062,170.34849 C 68.684958,182.19476 68.501242,184.26188 66.769075,191.68194 C 64.685501,200.60734 63.581512,219.60387 66.780486,223.03797 C 66.780486,223.03797 70.720195,223.2637 75.311719,223.70493 C 79.903235,224.14616 85.331807,224.95806 87.366447,225.53163 C 88.914437,225.96802 91.244957,226.70155 91.244957,226.70155 L 91.634577,239.03157 L 95.477127,240.00521 C 100.78918,241.52608 101.12532,241.74973 97.379277,243.56494 C 95.489707,244.48057 95.782867,244.4595 95.782867,244.4595 C 95.782867,244.4595 3.1991929,244.08353 2.2993819,243.56494 z"    />  </g></svg>';
    var emmy_svg = '<svg   xmlns:dc="http://purl.org/dc/elements/1.1/"   xmlns:cc="http://creativecommons.org/ns#"   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"   xmlns:svg="http://www.w3.org/2000/svg"   xmlns="http://www.w3.org/2000/svg"   id="svg2"   version="1.1"   width="321"   height="563.40002"   viewBox="0 0 321 563.40002">  <metadata     id="metadata8">    <rdf:RDF>      <cc:Work         rdf:about="">        <dc:format>image/svg+xml</dc:format>        <dc:type           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />        <dc:title></dc:title>      </cc:Work>    </rdf:RDF>  </metadata>  <defs     id="defs6" />  <path     style="fill:#ffea55;fill-opacity:1"     d="m 74.000736,558.45002 c 1.419168,-2.3925 5.869572,-9.89926 9.889782,-16.68169 L 91.2,529.43665 l 0,-18.11832 0,-18.11831 -1.5,0 c -1.314288,0 -1.5,-0.26 -1.5,-2.1 0,-1.82704 0.19056,-2.1 1.466076,-2.1 1.000278,0 1.810464,-0.58445 2.55,-1.83952 3.29883,-5.59841 17.748674,-11.01359 38.883924,-14.57201 15.07121,-2.53745 37.2238,-4.57025 49.93857,-4.58254 5.8672,-0.005 6.15295,-0.0656 6.464,-1.35593 0.179,-0.7425 1.38764,-6.21 2.68589,-12.15 l 2.36044,-10.8 -46.25496,-91.20001 C 127.98142,314.71219 106.27409,279.9457 92.962182,240.13737 88.114902,225.64192 85.404036,218.40266 84.357492,217.15891 82.493382,214.94354 81,210.15143 81,206.38504 c 0,-5.79136 3.886722,-13.68528 8.810394,-17.89391 l 2.666022,-2.27885 -8.333772,-26.65613 -8.333772,-26.65614 -10.754436,-0.37312 C 53.657564,132.13147 49.166702,131.30278 41.468017,128.17453 22.562277,120.49244 8.0414946,103.83674 2.5403311,83.523501 1.1083157,78.235737 0.9617808,76.678893 0.9474399,66.600014 0.93373098,56.965242 1.1077609,54.853206 2.2658231,50.600046 2.9996204,47.905064 3.6,45.051569 3.6,44.258946 3.6,41.308294 5.4985663,36.582977 7.807899,33.785964 9.1184184,32.198691 11.635303,29.010013 13.400976,26.700013 20.094714,17.94271 28.752256,10.929783 38.626436,6.2664654 48.028435,1.8261454 60.505212,-0.52607559 70.79076,0.20258241 76.76664,0.62593341 86.32782,3.2953864 92.701692,6.3200484 102.87171,11.14614 113.28506,20.061692 118.8,28.664521 c 1.78694,2.787483 3.5116,4.67981 5.1,5.595822 3.51801,2.028802 7.6379,6.4128 9.24688,9.839671 1.75952,3.747478 2.23256,9.138201 1.21206,13.812412 -0.43079,1.973174 -0.71217,4.93847 -0.62528,6.58955 0.12527,2.380278 -0.21942,3.719412 -1.66441,6.466381 -1.00231,1.905438 -2.12118,5.14455 -2.48637,7.198044 -1.56897,8.822442 -6.36005,20.95421 -10.33833,26.178259 -7.19039,9.44201 -17.57346,18.27858 -26.09455,22.20792 -1.7325,0.7989 -3.15,1.70018 -3.15,2.00283 0,1.30926 6.725634,21.75143 7.266342,22.08561 0.328836,0.20323 3.025728,4.52965 5.993098,9.61425 2.96737,5.08461 5.21821,8.50047 5.00185,7.5908 -1.03039,-4.3324 2.61944,-9.94923 8.35301,-12.85465 3.57477,-1.81147 9.37776,-2.48312 12.51324,-1.44832 1.87057,0.61734 2.45623,0.51503 5.3368,-0.93229 3.76508,-1.89173 10.6449,-2.57282 14.75838,-1.46106 2.8436,0.76855 5.8258,3.0433 7.41437,5.6555 1.14042,1.87525 9.0202,7.20659 9.62248,6.5104 0.19776,-0.2286 3.81209,-9.32563 8.03185,-20.21563 4.21976,-10.89001 7.78403,-19.99869 7.92061,-20.24153 0.13657,-0.24284 2.42268,0.65172 5.08023,1.98791 2.65755,1.33619 4.89397,2.34488 4.96982,2.24153 0.0759,-0.10336 7.19655,-12.75012 15.82378,-28.103909 8.62723,-15.353798 16.10334,-28.448798 16.61356,-29.100003 0.87677,-1.119006 0.91035,-1.068726 0.61169,0.915997 -0.17381,1.155 -2.21522,17.085 -4.53647,35.399995 -2.32125,18.315 -4.34836,33.8998 -4.50469,34.63289 -0.27243,1.27758 -0.50632,1.1982 -5.6375,-1.91321 l -5.35327,-3.24608 -0.32876,1.6132 c -0.18082,0.88726 -1.68957,11.04664 -3.35278,22.57639 -1.6632,11.52975 -3.16447,21.10365 -3.33615,21.27532 -0.17167,0.17168 -3.40574,-1.22777 -7.18681,-3.10989 -3.78107,-1.88211 -6.87643,-3.22101 -6.87856,-2.97532 -0.013,1.48955 -6.65991,47.21048 -6.89817,47.44875 -0.3262,0.32619 -2.27277,-0.69903 -14.39795,-7.58319 l -8.4,-4.76916 -7.35462,21.97515 c -4.04504,12.08633 -7.5017,22.43494 -7.68146,22.9969 -0.23954,0.7488 0.35068,1.36741 2.20939,2.31565 5.18677,2.64609 11.9275,10.8995 15.86876,19.42983 3.80532,8.23611 5.71185,17.96715 4.53225,23.13277 l -0.61656,2.7 14.51728,28.65811 c 10.78048,21.28139 14.73986,28.57269 15.38193,28.3263 0.84644,-0.3248 57.65033,20.07553 57.6355,20.699 -0.004,0.17412 -8.91414,10.03482 -19.8,21.91264 L 209.4,423.89211 l 0,21.96294 0,21.96295 8.85,0.40375 c 40.55234,1.85009 72.41453,8.97829 80.33073,17.97156 1.76176,2.00147 2.92223,2.80671 4.04491,2.80671 1.39927,0 1.57436,0.23355 1.57436,2.1 0,1.93333 -0.14286,2.1 -1.8,2.1 l -1.8,0 0,17.63244 0,17.63245 9.06443,15.21756 c 4.98543,8.36965 9.59746,16.09505 10.24893,17.16755 l 1.18451,1.95 -124.83872,0 -124.83872,0 z M 73.597602,127.00241 c 0.164172,-0.16417 -0.951516,-4.24865 -2.479314,-9.07661 -3.48879,-11.02485 -2.959782,-10.6958 -15.497704,-9.63975 -6.652075,0.5603 -6.449345,0.20293 -3.241462,5.71396 2.950134,5.06823 9.088502,10.96353 13.020878,12.50526 2.98059,1.16858 7.266258,1.42848 8.197602,0.49714 z M 53.618794,123.41898 C 51.683457,121.3394 49.155,117.96324 48,115.9164 c -4.492639,-7.96169 -3.856145,-7.31639 -7.216476,-7.31639 -7.015931,0 -17.811365,-3.27057 -22.927374,-6.94606 l -2.971964,-2.135143 1.107907,1.923713 c 1.709693,2.96864 9.668443,11.21041 14.007907,14.50604 5.149935,3.91116 14.729887,8.53593 20.7,9.99304 2.64,0.64434 5.168457,1.19108 5.618794,1.21497 0.450336,0.0239 -0.764664,-1.65802 -2.7,-3.73759 z m 43.898534,-5.12175 c 2.960472,-1.92654 5.897612,-4.08719 6.526972,-4.80146 l 1.1443,-1.29865 -2.9443,0.39864 c -4.94824,0.66994 -5.425882,0.96919 -8.227012,5.15425 -1.490904,2.2275 -2.52441,4.05 -2.29668,4.05 0.227724,0 2.836248,-1.57625 5.79672,-3.50278 z m -8.07456,-2.04722 1.850298,-2.55 -1.696536,-0.37901 c -0.93309,-0.20845 -2.333298,-0.41095 -3.111576,-0.45 -1.213794,-0.0609 -1.362444,0.13858 -1.045212,1.40255 0.561312,2.23644 1.493034,4.52646 1.841646,4.52646 0.171096,0 1.14372,-1.1475 2.16138,-2.55 z m 6.337452,-12.75 c 1.034124,-2.64 2.053632,-5.549916 2.265576,-6.466494 l 0.38535,-1.666494 -3.465576,1.732644 c -1.906062,0.952956 -5.670276,2.605477 -8.364918,3.672264 l -4.899348,1.93962 0.636402,1.89423 c 0.350022,1.04183 0.888258,2.21724 1.196082,2.61202 0.59037,0.75715 3.954072,1.23887 7.966212,1.14085 l 2.4,-0.0586 1.88022,-4.8 z m 12.89798,2.31662 c 4.16453,-1.86893 7.26138,-5.06592 9.37106,-9.674066 1.30961,-2.86056 1.46545,-3.85032 1.16691,-7.411297 -0.48858,-5.827734 -0.87483,-6.331002 -3.45027,-4.495602 -1.13624,0.809748 -4.16882,2.910492 -6.73905,4.668312 -3.19353,2.184103 -4.77647,3.670975 -4.99945,4.696039 -0.30776,1.414752 -3.55796,11.799704 -4.290162,13.707794 -0.508026,1.32389 4.546642,0.48087 8.940962,-1.49118 z M 42,103.39258 C 42,103.1685 41.422081,101.211 40.715736,99.042587 39.465596,95.204776 39.29675,95.005234 34.361241,91.532956 31.059647,89.210181 27.20339,87.178161 23.306333,85.707681 20.01476,84.465663 16.394282,82.876317 15.260827,82.175805 L 13.2,80.902143 l 0,2.973498 c 0,9.575389 7.306675,16.390069 20.4,19.026369 4.348796,0.87561 8.4,1.11221 8.4,0.49057 z m 12.55,0.17777 c -0.1375,-0.12632 -2.213885,-1.21293 -4.614189,-2.41469 l -4.36419,-2.185019 0.91419,2.187959 c 0.502804,1.20338 0.914189,2.28999 0.914189,2.41469 0,0.1247 1.665,0.22672 3.7,0.22672 2.035,0 3.5875,-0.10335 3.45,-0.22966 z m 11.133638,-2.82188 C 65.465166,100.06012 64.623852,98.0497 63.81405,96.280864 62.169456,92.688586 62.63472,92.86477 52.8,92.110228 50.325,91.92034 47.2875,91.603354 46.05,91.405816 c -1.2375,-0.197544 -2.249929,-0.12216 -2.249843,0.167514 2.07e-4,0.690012 9.944647,6.26136 15.299843,8.5717 5.157894,2.22521 7.156512,2.40841 6.583638,0.60344 z m 26.266704,-7.87626 c 2.887686,-1.35933 5.164188,-2.557662 5.058894,-2.662962 -0.1053,-0.105294 -2.352162,0.188448 -4.993038,0.652758 -2.64087,0.46431 -6.746778,1.035876 -9.124236,1.270146 -4.714452,0.46455 -4.553826,0.235608 -3.027654,4.315338 l 0.504072,1.34748 3.16581,-1.225626 C 85.275384,95.89525 89.062656,94.23154 91.950342,92.87221 Z M 59.4,86.712279 c 0,-0.158256 -1.218128,-3.035124 -2.70695,-6.393048 -1.488823,-3.357924 -2.601032,-6.211236 -2.471576,-6.340692 0.371589,-0.371586 19.254034,-5.446765 19.491562,-5.238895 0.117168,0.102546 0.580134,3.342619 1.028802,7.200169 0.448674,3.85755 1.12674,7.955976 1.50681,9.10761 l 0.691044,2.09388 4.280154,-0.392502 c 4.532112,-0.415602 19.130614,-2.714556 19.495864,-3.070188 0.5477,-0.533262 1.23411,-9.728808 1.25794,-16.852183 L 102,58.952846 99.45,56.615549 C 96.087768,53.53377 90.737862,49.473434 85.256142,45.84305 L 80.812284,42.900014 66.956142,42.918984 53.1,42.937954 48.173979,45.463622 c -2.709312,1.389117 -5.253173,3.13558 -5.653024,3.881028 -1.651033,3.07804 -1.234923,34.207515 0.479682,35.885265 C 43.85755,86.068407 59.4,87.473313 59.4,86.712279 Z m -51.7458018,-9.7599 c -0.6924114,-0.741198 -1.358835,-1.24773 -1.4809416,-1.125618 -0.122106,0.122106 0.2466648,2.213538 0.8194914,4.64763 l 1.0415034,4.425624 0.4394382,-3.3 c 0.383463,-2.879646 0.2790768,-3.47166 -0.8194914,-4.647636 z M 36.967956,81.150015 C 36.220288,75.757533 35.915551,62.0921 36.433634,57.189177 l 0.51892,-4.910837 -1.670633,0.986868 C 30.06717,56.345637 18.6,67.764806 18.6,69.877298 c 0,0.475296 2.707357,3.571537 6.01635,6.880531 5.844072,5.844072 7.747457,7.05321 11.315204,7.188072 1.368041,0.05172 1.414023,-0.07233 1.036402,-2.795886 z m 86.952124,-1.229922 c -0.67055,-0.670548 -1.31987,0.654192 -1.03695,2.1156 l 0.32218,1.664322 0.47751,-1.769838 c 0.26262,-0.973416 0.36939,-1.877952 0.23726,-2.010084 z m -8.80082,-1.582188 c 0.86586,-0.86586 0.81879,-1.18863 -0.53493,-3.668358 -0.81639,-1.495428 -2.74337,-4.346227 -4.2822,-6.335107 l -2.79787,-3.616146 -0.32949,3.79086 c -0.18122,2.084977 -0.48081,6.016129 -0.66575,8.735899 l -0.33627,4.945038 3.99855,-1.451394 c 2.19921,-0.79827 4.42579,-1.87863 4.94796,-2.400792 z M 17.606163,76.538409 C 16.085444,74.632551 15,74.260137 15,75.644247 c 0,0.46344 3.424598,2.945208 4.075579,2.953524 0.09657,0.0012 -0.564669,-0.925482 -1.469416,-2.059362 z M 123.30724,69.590156 c 1.83247,-2.49633 2.09174,-3.288666 2.08457,-6.37053 -0.005,-1.935786 -0.16555,-4.106255 -0.35786,-4.823263 -0.65923,-2.45778 -8.17011,-6.985684 -16.32784,-9.843165 l -3.1939,-1.118753 0.3053,1.632785 c 0.16791,0.898031 0.48121,2.982784 0.69624,4.632784 0.31362,2.40662 0.94811,3.652718 3.20784,6.3 4.11241,4.817736 6.28209,7.73649 8.1528,10.967593 1.896,3.274764 2.04566,3.23682 5.43285,-1.377451 z M 11.857292,71.173617 c 0.361173,-0.792691 0.421663,-1.659019 0.136154,-1.950001 -0.282566,-0.287982 -1.463912,-2.106504 -2.6252134,-4.041162 -2.0476194,-3.41121 -2.1237648,-3.468522 -2.5185318,-1.895646 -0.5000616,1.992402 0.5272896,5.613606 2.1935922,7.731967 1.532362,1.948086 1.985581,1.973022 2.813999,0.154842 z M 29.949688,51.126512 c 2.512717,-1.884574 5.239467,-3.888428 6.059444,-4.453008 L 37.5,45.646994 35.4,46.006906 c -6.898507,1.18231 -18.824066,6.14374 -23.371664,9.723389 -1.643183,1.293435 -1.523811,1.844676 1.54236,7.122383 l 1.483012,2.552664 5.163702,-5.426165 c 2.840037,-2.984392 7.219562,-6.968092 9.732278,-8.852665 z m 99.702432,-1.626498 c -0.36914,-1.65 -1.23536,-3.81 -1.92493,-4.8 -0.7092,-1.018188 -1.07085,-1.278792 -0.83263,-0.6 0.23162,0.66 1.0026,3.495 1.71329,6.3 1.378,5.438863 2.28712,4.655345 1.04427,-0.9 z M 17.153952,46.89582 c 4.957223,-2.46424 14.655736,-5.795343 18.804848,-6.458813 1.3302,-0.212707 2.647378,-0.690548 2.927062,-1.061867 0.698473,-0.92732 3.248783,-10.040481 2.905803,-10.383462 -0.152176,-0.152176 -3.475054,-0.283378 -7.384174,-0.29156 -7.651373,-0.01601 -11.333457,0.64392 -16.213939,2.906006 -3.460401,1.603884 -4.997996,3.72959 -8.048327,11.126721 -1.7389676,4.217039 -2.0712716,6.119361 -1.3824944,7.914285 0.320034,0.833996 0.5559162,0.8077 2.0039524,-0.223392 0.902671,-0.642759 3.776943,-2.230322 6.387269,-3.527918 z m 83.632688,2.23114 c -0.24873,-1.360181 -0.814448,-2.69692 -1.257164,-2.970531 -0.968118,-0.598331 -5.305668,-1.380226 -5.66475,-1.021139 -0.178554,0.178549 6.311604,5.888954 7.304714,6.427098 0.0382,0.02069 -0.13407,-1.075249 -0.3828,-2.435428 z m 22.00675,-1.109994 c -0.19613,-0.980676 -1.33947,-3.933197 -2.54074,-6.561157 -1.88729,-4.128725 -2.48099,-4.896258 -4.36839,-5.647441 -3.41868,-1.360631 -13.27999,-3.082653 -13.2893,-2.320632 -0.003,0.226752 0.44972,2.187003 1.00555,4.356113 l 1.01058,3.943835 4.84446,1.646893 c 2.66445,0.905791 6.73445,2.675373 9.04445,3.932405 2.31,1.257033 4.30125,2.318705 4.425,2.359273 0.12375,0.04057 0.0645,-0.728613 -0.13161,-1.709289 z M 99,39.708914 c 0,-0.270104 -0.427002,-1.928973 -0.948894,-3.686375 l -0.948894,-3.195276 -5.341998,0.379186 C 85.436436,33.655324 78,34.8184 78,35.358579 c 0,0.81428 3.58269,2.444224 5.492574,2.498845 1.104084,0.03158 4.572426,0.532304 7.707426,1.11273 6.938106,1.284546 7.8,1.366179 7.8,0.73876 z M 57.45,35.969058 c 2.0625,-0.804614 3.75,-1.624252 3.75,-1.821416 0,-0.381459 -9.260642,-3.310091 -12.324685,-3.89762 -1.919126,-0.367992 -2.07168,-0.09369 -4.226313,7.599119 -0.237612,0.848357 0.228758,0.876597 4.392581,0.26599 C 51.603712,37.739406 55.3875,36.773673 57.45,35.969058 Z m 16.399212,-5.081797 c 4.451802,-1.153578 14.972268,-2.661836 18.667536,-2.676256 l 2.816748,-0.01099 -1.269084,-3.053759 c -0.76542,-1.841814 -1.786824,-3.250605 -2.57364,-3.549752 -3.970716,-2.536441 -3.593171,-6.95089 -6.066048,-9.614896 C 81.937596,8.2535874 77.6994,6.1933604 72.429198,5.6643664 68.65143,5.2851744 68.08161,5.3920234 64.513272,7.1487104 59.768832,9.4843914 54.461406,15.06302 51.349325,20.985321 l -2.185355,4.158737 2.568015,0.669534 c 5.766268,1.503384 10.568421,3.030439 13.970715,4.442599 4.324338,1.794865 3.809262,1.754965 8.146512,0.63107 z M 113.4,29.631485 c 0,-0.966017 -6.77573,-8.027747 -10.68902,-11.140196 -4.876984,-3.878925 -7.591438,-5.591517 -6.212422,-3.919522 0.439206,0.532519 0.724572,1.859223 0.634146,2.948232 -0.09544,1.149441 0.576324,3.801644 1.601442,6.322621 1.704014,4.190532 1.839394,4.345133 3.865854,4.414761 1.155,0.03968 3.855,0.409257 6,0.821271 2.145,0.412014 4.1025,0.787871 4.35,0.835238 0.2475,0.04737 0.45,-0.07972 0.45,-0.282405 z M 28.697959,24.029337 C 31.628286,23.707393 36.127153,23.66645 39,23.935587 c 2.805,0.262776 5.122294,0.452272 5.149541,0.421103 0.02725,-0.03117 1.188954,-2.196242 2.58157,-4.81127 2.549783,-4.787939 7.7152,-11.7954176 9.569256,-12.9817926 1.824302,-1.167336 -4.011242,-0.02179 -9.992638,1.961605 -6.400489,2.1223636 -13.264604,6.0307176 -19.38343,11.0367196 -4.259202,3.484585 -6.495989,6.216072 -4.44614,5.429471 0.559768,-0.214803 3.358678,-0.64774 6.2198,-0.962086 z M 93.6,12.364207 c 0,-0.129694 -0.405,-0.39122 -0.9,-0.581169 -0.495,-0.18995 -0.9,-0.08384 -0.9,0.235806 0,0.319643 0.405,0.581169 0.9,0.581169 0.495,0 0.9,-0.106113 0.9,-0.235806 z"     id="path4144" />  <rect     y="493.01883"     x="91.434082"     height="35.565834"     width="209.03105"     id="rect4134"     style="opacity:1;fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.60000002;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1" /></svg>';
    var awards_svg = '<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 512.001 512.001" style="enable-background:new 0 0 512.001 512.001;" xml:space="preserve"><path style="fill:#F9AC30;" d="M227.117,383.98h-46.308c-16.987,0-30.758,13.771-30.758,30.758v34.25h211.906v-34.25 c0-16.987-13.771-30.758-30.758-30.758h-46.308H227.117z"></path><path style="fill:#DD8D19;" d="M491.157,70.23c-15.917-24.944-43.818-38.67-78.545-38.67h-0.902H100.3h-0.902 c-34.738,0-62.628,13.725-78.545,38.67c-17.196,26.947-17.636,62.691-1.206,98.089c30.197,65.029,125.456,86.713,129.503,87.604 l9.269,2.045h0.01H353.57h0.01l9.279-2.045c4.037-0.891,99.306-22.575,129.493-87.604C508.783,132.921,508.343,97.177,491.157,70.23 z M463.822,155.066c-12.1,26.056-40.379,43.671-61.978,53.852c-8.912,4.205-17.395,7.497-24.577,9.992l-242.523,0.01h-0.01 c-7.193-2.506-15.675-5.798-24.577-10.003c-21.589-10.181-49.878-27.796-61.978-53.852c-11.817-25.448-12.11-50.203-0.807-67.913 c9.93-15.571,28.415-24.137,52.028-24.137h0.933h311.348h0.933c23.613,0,42.088,8.566,52.028,24.137 C475.933,104.863,475.639,129.618,463.822,155.066z"></path><path style="fill:#F9AC30;" d="M278.024,383.98l-0.047-30.532c-0.034-21.96,11.352-42.511,30.284-53.637 c60.287-35.43,103.444-130.412,103.444-242.04V0H100.297v57.769c0,111.63,43.159,206.615,103.448,242.042 c18.931,11.125,30.317,31.675,30.284,53.633l-0.045,30.535l25.164,26.053L278.024,383.98z"></path><g><path style="fill:#DD8D19;" d="M245.486,353.447l-0.021,30.533h-11.481l0.042-30.533c0.031-21.956-11.356-42.507-30.281-53.632 c-60.29-35.43-103.447-130.415-103.447-242.041V0h81.198v57.774c0,111.626,20.656,206.611,49.501,242.041 C240.055,310.939,245.507,331.49,245.486,353.447z"></path><path style="fill:#DD8D19;" d="M247.916,383.98h-20.797H180.81c-16.987,0-30.758,13.771-30.758,30.758v34.25h67.105v-34.25 C217.157,397.751,230.928,383.98,247.916,383.98z"></path></g><path style="fill:#4F5B5E;" d="M219.114,432.212h-80.945c-9.652,0-17.476,7.824-17.476,17.476v62.314h270.624v-62.314 c0-9.652-7.824-17.476-17.476-17.476h-80.945"></path><path style="fill:#3B4547;" d="M159.138,432.212h-20.97c-9.652,0-17.476,7.824-17.476,17.476v62.314h20.97v-62.314 C141.664,440.036,149.487,432.212,159.138,432.212z"></path></svg>';    
    var tmdb_svg = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 150 150" width="150" height="150">  <defs>    <linearGradient id="grad" x1="0" y1="0" x2="1" y2="0">      <stop offset="0%" stop-color="#90cea1"/>      <stop offset="56%" stop-color="#3cbec9"/>      <stop offset="100%" stop-color="#00b3e5"/>    </linearGradient>    <style>      .text-style {            font-weight: bold;        fill: url(#grad);        text-anchor: start;        dominant-baseline: middle;        textLength: 150;        lengthAdjust: spacingAndGlyphs;        font-size: 70px;      }    </style>  </defs>  <!-- Верхний ряд TM -->  <text class="text-style" x="0" y="50" textLength="150" lengthAdjust="spacingAndGlyphs">TM</text>  <!-- Нижний ряд DB -->  <text class="text-style" x="0" y="120" textLength="150" lengthAdjust="spacingAndGlyphs">DB</text></svg>';
    var imdb_svg = '<?xml version="1.0" encoding="utf-8"?><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 122.88 122.88" style="enable-background:new 0 0 122.88 122.88" xml:space="preserve"><style type="text/css"><![CDATA[	.st0{fill:#F5C518;}]]></style><g><path class="st0" d="M18.43,0h86.02c10.18,0,18.43,8.25,18.43,18.43v86.02c0,10.18-8.25,18.43-18.43,18.43H18.43 C8.25,122.88,0,114.63,0,104.45l0-86.02C0,8.25,8.25,0,18.43,0L18.43,0z"/><path d="M24.96,78.72V44.16h-9.6v34.56H24.96L24.96,78.72z M45.36,44.16L43.2,60.24L42,51.6l-1.2-7.44l-12,0v34.56h8.16v-22.8 l3.36,22.8h6l3.12-23.28v23.28h8.16V44.16H45.36L45.36,44.16z M61.44,78.72V44.16h14.88c3.6,0,6.24,2.64,6.24,6v22.56 c0,3.36-2.64,6-6.24,6H61.44L61.44,78.72z M72.72,50.4l-2.16-0.24v22.56c1.2,0,2.16-0.24,2.4-0.72c0.48-0.48,0.48-1.92,0.48-4.32 V54.24v-2.88L72.72,50.4L72.72,50.4L72.72,50.4z M100.56,52.8h0.72c3.36,0,6.24,2.64,6.24,6v13.92c0,3.36-2.88,6-6.24,6l-0.72,0 c-1.92,0-3.84-0.96-5.04-2.64l-0.48,2.16H86.4V44.16h9.12V55.2C96.72,53.76,98.64,52.8,100.56,52.8L100.56,52.8z M98.64,69.6v-8.16 L98.4,58.8c-0.24-0.48-0.96-0.72-1.44-0.72c-0.48,0-1.2,0.24-1.44,0.72v13.68c0.24,0.48,0.96,0.72,1.44,0.72 c0.48,0,1.44-0.24,1.44-0.72L98.64,69.6L98.64,69.6z"/></g></svg>';
    var kp_svg = '<svg width="300" height="300" viewBox="0 0 300 300" fill="none" xmlns="http://www.w3.org/2000/svg"><mask id="mask0_1_69" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="300" height="300"><circle cx="150" cy="150" r="150" fill="white"/></mask><g mask="url(#mask0_1_69)"><circle cx="150" cy="150" r="150" fill="black"/><path d="M300 45L145.26 127.827L225.9 45H181.2L126.3 121.203V45H89.9999V255H126.3V178.92L181.2 255H225.9L147.354 174.777L300 255V216L160.776 160.146L300 169.5V130.5L161.658 139.494L300 84V45Z" fill="url(#paint0_radial_1_69)"/></g><defs><radialGradient id="paint0_radial_1_69" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(89.9999 45) rotate(45) scale(296.985)"><stop offset="0.5" stop-color="#FF5500"/><stop offset="1" stop-color="#BBFF00"/></radialGradient></defs></svg>';
    var rt_svg = '<svg id="svg3390" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns="http://www.w3.org/2000/svg" height="141.25" viewBox="0 0 138.75 141.25" width="138.75" version="1.1" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/"> <metadata id="metadata3396">  <rdf:RDF>   <cc:Work rdf:about="">    <dc:format>image/svg+xml</dc:format>    <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage"/>    <dc:title/>   </cc:Work>  </rdf:RDF> </metadata> <g id="layer1" fill="#f93208">  <path id="path3412" d="m20.154 40.829c-28.149 27.622-13.657 61.011-5.734 71.931 35.254 41.954 92.792 25.339 111.89-5.9071 4.7608-8.2027 22.554-53.467-23.976-78.009z"/>  <path id="path3471" d="m39.613 39.265 4.7778-8.8607 28.406-5.0384 11.119 9.2082z"/> </g> <g id="layer2">  <path id="path3437" d="m39.436 8.5696 8.9682-5.2826 6.7569 15.479c3.7925-6.3226 13.79-16.316 24.939-4.6684-4.7281 1.2636-7.5161 3.8553-7.7397 8.4768 15.145-4.1697 31.343 3.2127 33.539 9.0911-10.951-4.314-27.695 10.377-41.771 2.334 0.009 15.045-12.617 16.636-19.902 17.076 2.077-4.996 5.591-9.994 1.474-14.987-7.618 8.171-13.874 10.668-33.17 4.668 4.876-1.679 14.843-11.39 24.448-11.425-6.775-2.467-12.29-2.087-17.814-1.475 2.917-3.961 12.149-15.197 28.625-8.476z" fill="#02902e"/> </g></svg>';
    var mc_svg = '<svg xmlns="http://www.w3.org/2000/svg" width="88" height="88" viewBox="0 0 88 88"><circle fill="#001B36" stroke="#FC0" stroke-width="4.6" cx="44" cy="44" r="41.6"/><path transform="translate(-10,-961) matrix(1.2756629,-1.3487733,1.3685717,1.2634987,-267.04706,1066.0743)" fill="#FFF"d="m126.73438,92.087002 5.05859,0 0,2.832031 c 1.80989-2.200501 3.96483-3.30076 6.46484-3.300781 1.32811,2.1e-5 2.48045,.273458 3.45703,.820312 .97655,.546895 1.77733,1.373717 2.40235,2.480469 .91144-1.106752 1.89451-1.933574 2.94922-2.480469 1.05466-0.546854 2.18096-0.820291 3.3789-0.820312 1.52341,2.1e-5 2.81247,.309265 3.86719,.927734 1.05466,.618509 1.84242,1.526711 2.36328,2.724609 .37757,.885434 .56637,2.317724 .56641,4.296875 l 0,13.26172-5.48828,0 0-11.85547 c-3e-5-2.057277-0.18883-3.385401-0.56641-3.984375-0.50784-0.781233-1.28909-1.171858-2.34375-1.171875-0.76825,1.7e-5-1.49091,.234392-2.16797,.703125-0.6771,.468766-1.16538,1.155614-1.46484,2.060547-0.2995,.904961-0.44924,2.333998-0.44922,4.287108 l 0,9.96094-5.48828,0 0-11.36719 c-2e-5-2.018214-0.0977-3.320296-0.29297-3.906248-0.19533-0.585922-0.49806-1.02212-0.9082-1.308594-0.41017-0.286442-0.96681-0.429671-1.66993-0.429688-0.84636,1.7e-5-1.60808,.227882-2.28515,.683594-0.6771,.455745-1.16212,1.113297-1.45508,1.972656-0.29298,.859389-0.43946,2.28517-0.43945,4.27734 l 0,10.07813-5.48828,0z"/></svg>';

    
    Lampa.Lang.add({
         maxsm_ratings: {
            ru: 'Рейтинг и качество',
            en: 'Rating & Quality',
            uk: 'Рейтинг і якість',
            be: 'Рэйтынг і якасць',
            pt: 'Classificação e Qualidade',
            zh: '评分与画质',
            he: 'דירוג ואיכות',
            cs: 'Hodnocení a kvalita',
            bg: 'Рейтинг и качество'
        },
        maxsm_ratings_cc: {
            ru: 'Очистить локальный кеш',
            en: 'Clear local cache',
            uk: 'Очистити локальний кеш',
            be: 'Ачысціць лакальны кэш',
            pt: 'Limpar cache local',
            zh: '清除本地缓存',
            he: 'נקה מטמון מקומי',
            cs: 'Vymazat místní mezipaměť',
            bg: 'Изчистване на локалния кеш'
        },
        maxsm_ratings_critic: {
            ru: 'Оценки критиков',
            en: 'Critic Ratings',
            uk: 'Оцінки критиків',
            be: 'Ацэнкі крытыкаў',
            pt: 'Avaliações da crítica',
            zh: '影评人评分',
            he: 'דירוגי מבקרים',
            cs: 'Hodnocení kritiků',
            bg: 'Оценки на критиците'
        },
        maxsm_ratings_mode: {
            ru: 'Средний рейтинг',
            en: 'Average rating',
            uk: 'Середній рейтинг',
            be: 'Сярэдні рэйтынг',
            pt: 'Classificação média',
            zh: '平均评分',
            he: 'דירוג ממוצע',
            cs: 'Průměrné hodnocení',
            bg: 'Среден рейтинг'
        },
        maxsm_ratings_mode_normal: {
            ru: 'Показывать средний рейтинг',
            en: 'Show average rating',
            uk: 'Показувати середній рейтинг',
            be: 'Паказваць сярэдні рэйтынг',
            pt: 'Mostrar classificação média',
            zh: '显示平均评分',
            he: 'הצג דירוג ממוצע',
            cs: 'Zobrazit průměrné hodnocení',
            bg: 'Показване на среден рейтинг'
        },
        maxsm_ratings_mode_simple: {
            ru: 'Только средний рейтинг',
            en: 'Only average rating',
            uk: 'Лише середній рейтинг',
            be: 'Толькі сярэдні рэйтынг',
            pt: 'Apenas classificação média',
            zh: '仅显示平均评分',
            he: 'רק דירוג ממוצע',
            cs: 'Pouze průměrné hodnocení',
            bg: 'Само среден рейтинг'
        },
        maxsm_ratings_mode_noavg: {
            ru: 'Без среднего рейтинга',
            en: 'No average',
            uk: 'Без середнього рейтингу',
            be: 'Без сярэдняга рэйтынгу',
            pt: 'Sem média',
            zh: '无平均值',
            he: 'ללא ממוצע',
            cs: 'Bez průměru',
            bg: 'Без среден рейтинг'
        }, 
        maxsm_ratings_icons: {
            ru: 'Значки',
            en: 'Icons',
            uk: 'Значки',
            be: 'Значкі',
            pt: 'Ícones',
            zh: '图标',
            he: 'סמלים',
            cs: 'Ikony',
            bg: 'Икони'
        },
        maxsm_ratings_colors: {
            ru: 'Цвета',
            en: 'Colors',
            uk: 'Кольори',
            be: 'Колеры',
            pt: 'Cores',
            zh: '颜色',
            he: 'צבעים',
            cs: 'Barvy',
            bg: 'Цветове'
        },
        maxsm_ratings_avg: {
            ru: 'ИТОГ',
            en: 'TOTAL',
            uk: 'ПІДСУМОК',
            be: 'ВЫНІК',
            pt: 'TOTAL',
            zh: '总评',
            he: 'סה"כ',
            cs: 'VÝSLEDEK',
            bg: 'РЕЗУЛТАТ'
        },
        maxsm_ratings_avg_simple: {
            ru: 'Оценка',
            en: 'Rating',
            uk: 'Оцінка',
            be: 'Ацэнка',
            pt: 'Avaliação',
            zh: '评分',
            he: 'דירוג',
            cs: 'Hodnocení',
            bg: 'Оценка'
        },
        maxsm_ratings_loading: {
            ru: 'Загрузка',
            en: 'Loading',
            uk: 'Завантаження',
            be: 'Загрузка',
            pt: 'Carregando',
            zh: '加载中',
            he: 'טוען',
            cs: 'Načítání',
            bg: 'Зареждане'
        },
        maxsm_ratings_oscars: { 
            ru: 'Оскар',
            en: 'Oscar',
            uk: 'Оскар',
            be: 'Оскар',
            pt: 'Oscar',
            zh: '奥斯卡奖',
            he: 'אוסקר',
            cs: 'Oscar',
            bg: 'Оскар'
        },
        maxsm_ratings_emmy: {
            ru: 'Эмми',
            en: 'Emmy',
            uk: 'Еммі',
            be: 'Эммі',
            pt: 'Emmy',
            zh: '艾美奖',
            he: 'אמי',
            cs: 'Emmy',
            bg: 'Еми'
        },
        maxsm_ratings_awards: {
            ru: 'Награды',
            en: 'Awards',
            uk: 'Нагороди',
            be: 'Узнагароды',
            pt: 'Prêmios',
            zh: '奖项',
            he: 'פרסים',
            cs: 'Ocenění',
            bg: 'Награди'
        },
        maxsm_ratings_quality: {
            ru: 'Качество внутри карточек',
            en: 'Quality inside cards',
            uk: 'Якість всередині карток',
            be: 'Якасць унутры картак',
            pt: 'Qualidade dentro dos cartões',
            zh: '卡片内的质量',
            he: 'איכות בתוך כרטיסים',
            cs: 'Kvalita uvnitř karet',
            bg: 'Качество вътре в картите'
        },
        maxsm_ratings_quality_inlist: {
            ru: 'Качество на карточках',
            en: 'Quality on cards',
            uk: 'Якість на картках',
            be: 'Якасць на картках',
            pt: 'Qualidade nos cartões',
            zh: '卡片上的质量',
            he: 'איכות בכרטיסים',
            cs: 'Kvalita na kartách',
            bg: 'Качество по картите'
        },
        maxsm_ratings_quality_tv: {
            ru: 'Качество для сериалов',
            en: 'Quality for series',
            uk: 'Якість для серіалів',
            be: 'Якасць для серыялаў',
            pt: 'Qualidade para séries',
            zh: '剧集的质量',
            he: 'איכות לסדרות',
            cs: 'Kvalita pro seriály',
            bg: 'Качество за сериали'
        },
        maxsm_ratings_optimize: {
            ru: 'Оптимизация запросов',
            en: 'Request Optimization',
            uk: 'Оптимізація запитів',
            be: 'Аптымізацыя запытаў',
            pt: 'Otimização de Requisições',
            zh: '请求优化',
            he: 'אופטימיזציית בקשות',
            cs: 'Optimalizace dotazů',
            bg: 'Оптимизация на заявките'
        },
        maxsm_ratings_optimize_accuracy: {
            ru: 'Качество данных',
            en: 'Data Accuracy',
            uk: 'Якість даних',
            be: 'Якасць дадзеных',
            pt: 'Precisão dos Dados',
            zh: '数据准确性',
            he: 'דיוק נתונים',
            cs: 'Přesnost dat',
            bg: 'Точност на данните'
        },
        maxsm_ratings_optimize_efficiency: {
            ru: 'Экономия запросов',
            en: 'Request Efficiency',
            uk: 'Економія запитів',
            be: 'Эканомія запытаў',
            pt: 'Eficiência de Requisições',
            zh: '请求效率',
            he: 'יעילות בקשות',
            cs: 'Úspora dotazů',
            bg: 'Икономия на заявки'
        }
    });

    // Стили
    var modalStyle = "<style id=\"maxsm_ratings_modal\">" +
        ".maxsm-modal-ratings {" +
        "    padding: 1.25em;" +
        "    font-size: 1.4em;" +
        "    line-height: 1.6;" +
        "}" +
        ".maxsm-modal-rating-line {" +
        "    padding: 0.5em 0;" +
        "    border-bottom: 0.0625em solid rgba(255, 255, 255, 0.1);" +
        "}" +
        ".maxsm-modal-rating-line:last-child {" +
        "    border-bottom: none;" +
        "}" +
        ".maxsm-modal-imdb { color: #f5c518; }" +
        ".maxsm-modal-kp { color: #4CAF50; }" +
        ".maxsm-modal-tmdb { color: #01b4e4; }" +
        ".maxsm-modal-rt { color: #fa320a; }" +
        ".maxsm-modal-mc { color: #6dc849; }" +
        ".maxsm-modal-oscars, .maxsm-modal-emmy, .maxsm-modal-awards { color: #FFD700; }" +
        "</style>";
    
    Lampa.Template.add('maxsm_ratings_modal', modalStyle);
    $('body').append(Lampa.Template.get('maxsm_ratings_modal', {}, true));
    
    var style = "<style id=\"maxsm_ratings\">" +
        ".full-start-new__rate-line {" +
        "visibility: hidden;" +
        //"flex-wrap: wrap;" +
        //"gap: 0.4em 0;" +
        "}" +
        ".full-start-new__rate-line > * {" +
        "margin-right: 0.5em !important;" +
        "}" +
        ".rate--green  { color: #4caf50; }" +
        ".rate--lime   { color: #cddc39; }" +
        ".rate--orange { color: #ff9800; }" +
        ".rate--red    { color: #f44336; }" +
        ".rate--gold   { color: gold; }" +
        ".rate--icon    { height: 1.8em; }" +
        ".full-start__rate > div:last-child { padding: 0.2em 0.4em; }" +
        ".jr { min-width: 5.0em; }" +
        ".rutor { min-width: 7.0em; }" +
        ".maxsm-quality { min-width: 2.8em; text-align: center; }" +
        "</style>";
    
    Lampa.Template.add('maxsm_ratings_css', style);
    $('body').append(Lampa.Template.get('maxsm_ratings_css', {}, true));
        
    var loadingStyles = "<style id=\"maxsm_ratings_loading_animation\">" +
                    ".loading-dots-container {" +
                    "    position: absolute;" +
                    "    top: 50%;" +
                    "    left: 0;" +
                    "    right: 0;" +
                    "    text-align: left;" +
                    "    transform: translateY(-50%);" +
                    "    z-index: 10;" +
                    "}" +
                    ".full-start-new__rate-line {" +
                    "    position: relative;" +
                    "}" +
                    ".loading-dots {" +
                    "    display: inline-flex;" +
                    "    align-items: center;" +
                    "    gap: 0.4em;" +
                    "    color: #ffffff;" +
                    "    font-size: 1em;" +
                    "    background: rgba(0, 0, 0, 0.3);" +
                    "    padding: 0.6em 1em;" +
                    "    border-radius: 0.5em;" +
                    "}" +
                    ".loading-dots__text {" +
                    "    margin-right: 1em;" +
                    "}" +
                    ".loading-dots__dot {" +
                    "    width: 0.5em;" +
                    "    height: 0.5em;" +
                    "    border-radius: 50%;" +
                    "    background-color: currentColor;" +
                    "    opacity: 0.3;" +
                    "    animation: loading-dots-fade 1.5s infinite both;" + 
                    "}" +
                    ".loading-dots__dot:nth-child(1) {" +
                    "    animation-delay: 0s;" +
                    "}" +
                    ".loading-dots__dot:nth-child(2) {" +
                    "    animation-delay: 0.5s;" + 
                    "}" +
                    ".loading-dots__dot:nth-child(3) {" +
                    "    animation-delay: 1s;" +   
                    "}" +
                    "@keyframes loading-dots-fade {" +
                    "    0%, 90%, 100% { opacity: 0.3; }" + 
                    "    35% { opacity: 1; }" +             
                    "}" +
                    "@media screen and (max-width: 480px) { .loading-dots-container { -webkit-justify-content: center; justify-content: center; text-align: center; max-width: 100%; }}" +
                    "</style>";


    Lampa.Template.add('maxsm_ratings_loading_animation_css', loadingStyles);
    $('body').append(Lampa.Template.get('maxsm_ratings_loading_animation_css', {}, true));
    
    // Глобальная переменная текущей карточки (сейчас не используется)
    var globalCurrentCard = null;

    // Перепемнные настройки 
    var C_LOGGING = true;  // Общий логгинг 
    var Q_LOGGING = false;  // Логгинг качества
    var CARDLIST_LOGGING = false; // Логгинг в списках карточек
    var CACHE_TIME = 3 * 24 * 60 * 60 * 1000;  // Время, которое кеш считается валидным
    var OMDB_CACHE = 'maxsm_ratings_omdb_cache';
    var KP_CACHE = 'maxsm_ratings_kp_cache';
    var ID_MAPPING_CACHE = 'maxsm_ratings_id_mapping_cache';
    var QUALITY_CACHE = 'maxsm_ratings_quality_cache';
    var OMDB_API_KEYS = (window.RATINGS_PLUGIN_TOKENS && window.RATINGS_PLUGIN_TOKENS.OMDB_API_KEYS) || ['YOU_KEY']; // api ключи массивом
    var KP_API_KEYS   = (window.RATINGS_PLUGIN_TOKENS && window.RATINGS_PLUGIN_TOKENS.KP_API_KEYS)   || ['YOU_KEY']; // api ключи массивом
    var PROXY_TIMEOUT = 5000; // Таймаут прокси
    var JACRED_PROTOCOL = 'https://'; // Протокол JacRed
    var JACRED_URL = Lampa.Storage.get('jackett_url'); // Адрес JacRed для получения информации о карточках без протокола (jacred.xyz)
    var JACRED_API_KEY = Lampa.Storage.get('jackett_key'); // api ключ JacRed
    // var JACRED_URL = 'parser.lampa.ruzha.ru';
    // var JACRED_API_KEY = '1';
    var PROXY_LIST = [  // Корс прокси для запросов 
        'https://cors.bwa.workers.dev/',
        'https://api.allorigins.win/raw?url='
    ];
    
    // Словарь возрастных рейтингов
    var AGE_RATINGS = {
        'G': '3+',
        'PG': '6+',
        'PG-13': '13+',
        'R': '17+',
        'NC-17': '18+',
        'TV-Y': '0+',
        'TV-Y7': '7+',
        'TV-G': '3+',
        'TV-PG': '6+',
        'TV-14': '14+',
        'TV-MA': '17+'
    };
    
    // Весовые коэффициенты для источников рейтингов
    var WEIGHTS = {
        imdb: 0.35,
        tmdb: 0.15,
        kp: 0.20,
        mc: 0.15,
        rt: 0.15
    };
    
    // Берем случайный токен из массива
    function getRandomToken(arr) {
      if (!arr || !arr.length) return '';
      return arr[Math.floor(Math.random() * arr.length)];
    }
    
    // Получаем количество наград
    function parseAwards(awardsText, localCurrentCard) {
        if (typeof awardsText !== 'string') return null;
        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Parse awards: " + awardsText);
    
        var result = {
            oscars: 0,
            awards: 0
        };
    
        var oscarMatch = awardsText.match(/Won (\d+) Oscars?/i);
        if (oscarMatch && oscarMatch[1]) {
            result.oscars = parseInt(oscarMatch[1], 10);
            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Oscars: " + result.oscars);
        }

        var emmyMatch = awardsText.match(/Won (\d+) Primetime Emmys?/i);
        if (emmyMatch && emmyMatch[1]) {
            result.emmy = parseInt(emmyMatch[1], 10);
            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Emmy: " + result.emmy);
        }
    
        var otherMatch = awardsText.match(/Another (\d+) wins?/i);
        if (otherMatch && otherMatch[1]) {
            result.awards = parseInt(otherMatch[1], 10);
            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Awards (Another): " + result.awards);
        }
    
        if (result.awards === 0) {
            var simpleMatch = awardsText.match(/(\d+) wins?/i);
            if (simpleMatch && simpleMatch[1]) {
                result.awards = parseInt(simpleMatch[1], 10);
                if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Awards (Simple): " + result.awards);
            }
        }

        return result;
    }
    
    // Получение данных через прокси
    function fetchWithProxy(url, localCurrentCard, callback) {
        var currentProxy = 0;
        var callbackCalled = false;
        
        function tryNextProxy() {
            if (currentProxy >= PROXY_LIST.length) {
                if (!callbackCalled) {
                    callbackCalled = true;
                    callback(new Error('All proxies failed'));
                }
                return;
            }
            
            var proxyUrl = PROXY_LIST[currentProxy] + encodeURIComponent(url);
                if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Fetch with proxy: " + proxyUrl);
            
            var timeoutId = setTimeout(function() {
                if (!callbackCalled) {
                    currentProxy++;
                    tryNextProxy();
                }
            }, PROXY_TIMEOUT);
            
            fetch(proxyUrl)
                .then(function(response) {
                    clearTimeout(timeoutId);
                    if (!response.ok) throw new Error('Proxy error: ' + response.status);
                    return response.text();
                })
                .then(function(data) {
                    if (!callbackCalled) {
                        callbackCalled = true;
                        clearTimeout(timeoutId);
                        callback(null, data);
                    }
                })
                .catch(function() {
                    clearTimeout(timeoutId);
                    if (!callbackCalled) {
                        currentProxy++;
                        tryNextProxy();
                    }
                });
        }
        
        tryNextProxy();
    }
//-----------------------------------------------------get---kinopoisk-------------------------------------
    function getKPRatings(normalizedCard, apiKey, localCurrentCard, callback) {
        // Если есть kinopoisk_id - сразу переходим к запросу рейтингов
        if (normalizedCard.kinopoisk_id) {
            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Using provided kinopoisk_id: " + normalizedCard.kinopoisk_id);
            return fetchRatings(normalizedCard.kinopoisk_id, localCurrentCard);
        }
    
        // Старая логика поиска по названию/году
        var queryTitle = (normalizedCard.original_title || normalizedCard.title || '').replace(/[:\-–—]/g, ' ').trim();
        var year = '';
        if (normalizedCard.release_date && typeof normalizedCard.release_date === 'string') {
            year = normalizedCard.release_date.split('-')[0];
        }
        
        if (!year) {
            callback(null);
            return;
        }
        
        var encodedTitle = encodeURIComponent(queryTitle);
        var searchUrl = 'https://kinopoiskapiunofficial.tech/api/v2.1/films/search-by-keyword?keyword=' + encodedTitle;
        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Find information in KP by title and year");        
        fetch(searchUrl, {
            method: 'GET',
            headers: {
                'X-API-KEY': apiKey,
                'Content-Type': 'application/json'
            }
        })
        .then(function(response) {
            if (!response.ok) throw new Error('HTTP error: ' + response.status);
            return response.json();
        })
        .then(function(data) {
            if (!data.films || !data.films.length) {
                callback(null);
                return;
            }
            
            var bestMatch = null;
            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Match KP inf");
            var filmYear;
            var targetYear;
            var film2;
            // Сначала пытаемся найти точное совпадение
            for (var j = 0; j < data.films.length; j++) {
                film2 = data.films[j];
                if (!film2.year) continue;
                
                filmYear = parseInt(film2.year.substring(0, 4), 10);
                targetYear = parseInt(year, 10);
                
                // Двойная проверка на валидность чисел
                if (isNaN(filmYear)) continue;
                if (isNaN(targetYear)) continue;
                
                if (filmYear === targetYear) {
                    bestMatch = film2;
                    if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", KP EXACT match for: " + queryTitle + " / " + year + " is id: " + bestMatch.filmId + " / " + film2.nameRu + " / " + film2.nameEn + " / " + film2.year);
                    break;
                }
            }
            
            // Если точное совпадение не найдено, ищем +- год
            if (!bestMatch) {
                for (var k = 0; k < data.films.length; k++) {
                    film2 = data.films[k];
                    if (!film2.year) continue;
                    
                    filmYear = parseInt(film2.year.substring(0, 4), 10);
                    targetYear = parseInt(year, 10);
                    
                    // Двойная проверка на валидность чисел
                    if (isNaN(filmYear)) continue;
                    if (isNaN(targetYear)) continue;
                    
                    if (Math.abs(filmYear - targetYear) <= 1) {
                        bestMatch = film2;
                        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", KP APPROXIMATE match for: " + queryTitle + " / " + year + " is id: " + bestMatch.filmId + " / " + film2.nameRu + " / " + film2.nameEn + " / " + film2.year);
                        break;
                    }
                }
            }
            
            if (!bestMatch || !bestMatch.filmId) {
                callback(null);
                return;
            }
            
            fetchRatings(bestMatch.filmId, localCurrentCard);
        })
        .catch(function() {
            console.warn("MAXSM-RATINGS", "card: " + localCurrentCard + "Kinopoisk API request failed");
            callback(null);
        });
    
        // Общая функция получения рейтингов по ID
        function fetchRatings(filmId, localCurrentCard) {
            var xmlUrl = 'https://rating.kinopoisk.ru/' + filmId + '.xml';
            
            fetchWithProxy(xmlUrl, localCurrentCard, function(error, xmlText) {
                if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Try to get KP ratings from XML");
                if (!error && xmlText) {
                    try {
                        var parser = new DOMParser();
                        var xmlDoc = parser.parseFromString(xmlText, "text/xml");
                        var kpRatingNode = xmlDoc.getElementsByTagName("kp_rating")[0];
                        var imdbRatingNode = xmlDoc.getElementsByTagName("imdb_rating")[0];
                        
                        var kpRating = kpRatingNode ? parseFloat(kpRatingNode.textContent) : null;
                        var imdbRating = imdbRatingNode ? parseFloat(imdbRatingNode.textContent) : null;
                        
                        var hasValidKp = !isNaN(kpRating) && kpRating > 0;
                        var hasValidImdb = !isNaN(imdbRating) && imdbRating > 0;
                        
                        if (hasValidKp || hasValidImdb) {
                            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Got KP ratings from XML");
                            return callback({
                                kinopoisk: hasValidKp ? kpRating : null,
                                imdb: hasValidImdb ? imdbRating : null
                            });
                        }
                    } catch (e) {
                        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", XML parse error, fallback to API");
                    }
                }
                
                // Fallback к API
                if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Try to get KP ratings from API");
                fetch('https://kinopoiskapiunofficial.tech/api/v2.2/films/' + filmId, {
                    headers: { 'X-API-KEY': apiKey }
                })
                    .then(function(response) {
                        if (!response.ok) throw new Error('API error');
                        return response.json();
                    })
                    .then(function(data) {
                        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Got KP ratings from API");
                        callback({
                            kinopoisk: data.ratingKinopoisk || null,
                            imdb: data.ratingImdb || null
                        });
                    })
                    .catch(function() {
                        callback(null);
                    });
            });
        }
    }
//-------------------------------------------------end---get---kinopoisk-----------------------------------
    function addLoadingAnimation(localCurrentCard, render) {
        //var render = Lampa.Activity.active().activity.render();
        if (!render) return;
        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Add loading animation");
        var rateLine = $('.full-start-new__rate-line', render);
        if (!rateLine.length || $('.loading-dots-container', rateLine).length) return;

        rateLine.append(
            '<div class="loading-dots-container">' +
                '<div class="loading-dots">' +
                    '<span class="loading-dots__text">' + Lampa.Lang.translate("maxsm_ratings_loading") + '</span>' +
                    '<span class="loading-dots__dot"></span>' +
                    '<span class="loading-dots__dot"></span>' +
                    '<span class="loading-dots__dot"></span>' +
                '</div>' +
            '</div>'
        );

        $('.loading-dots-container', rateLine).css({
            'opacity': '1',
            'visibility': 'visible'
        });
    }

    // Улучшенная функция удаления анимации
    function removeLoadingAnimation(localCurrentCard, render) {
        // Получаем активный рендер из текущей активности
        // var render = Lampa.Activity.active().activity.render();
        if (!render) return;
    
        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Remove animation");
    
        // Ищем контейнеры с анимацией только внутри render
        var containers = $('.loading-dots-container', render);
        containers.each(function(index, element) {
            element.parentNode.removeChild(element);
        });
    }

    
    // Вспомогательные функции
    function getCardType(card) {
        var type = card.media_type || card.type;
        if (type === 'movie' || type === 'tv') return type;
        return card.name || card.original_name ? 'tv' : 'movie';
    }
    
    function getRatingClass(rating) {
        if (rating >= 8.5) return 'rate--green';
        if (rating >= 7.0) return 'rate--lime';
        if (rating >= 5.0) return 'rate--orange';
        return 'rate--red';
    }
    
    // Функция перевода качества
    function translateQuality(q) {
        if (q === '2160p') return '4K';
        if (q === '1080p') return 'FHD';
        if (q === '720p') return 'HD';
        if (q === 'TSp') return 'TS';
        return 'SD'; // Для всех остальных случаев
    }
    
    // Проверка в той мы карточке (сейчас не используется)
    function stillHere(localCurrentCard) {
        if (globalCurrentCard !== localCurrentCard) {
                    if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Card changed! Skip!");
                    return false;
                } else {
                    if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Card ok!");
                    return true;
                }
    }
    
// ------------------------------------------------------------JacRed------------------------------------------------------------------------------    
    function getBestReleaseFromJacred(normalizedCard, localCurrentCard, callback) {
        if (Q_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", quality: JacRed: Optimized search");
    
        var MAX_QUALITY = 2160;
        var stopWords = ['camrip', 'камрип', 'ts', 'telecine', 'telesync', 'telesynch', 'upscale']; // Релизы с данными словами игнорируются
        var findStopWords = false;
        var stopWordsPatterns = null;
    
        function hasLetters(str) {
            return /[a-zа-яё]/i.test(str || '');
        }
        function onlyDigits(str) {
            return /^\d+$/.test(str);
        }
        function isScreenCopy(title) {
            if (!title) return false;
            var lower = title.toLowerCase();
            
            if (stopWordsPatterns === null) {
                stopWordsPatterns = stopWords.map(function(word) {
                    return new RegExp('\\b' + word + '\\b', 'i');
                });
            }
    
            for (var i = 0; i < stopWordsPatterns.length; i++) {
                if (stopWordsPatterns[i].test(lower)) {
                    return true;
                }
            }
            return false;
        }
    
        // Извлечение года
        var year = '';
        var dateStr = normalizedCard.release_date || '';
        if (dateStr.length >= 4) {
            year = dateStr.substring(0, 4);
        }
    
        if (!year || isNaN(year)) {
            if (Q_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", quality: JacRed: Missing/invalid year");
            callback(null);
            return;
        }
    
        // Основная функция поиска
        function searchJacred(searchTitle, searchYear, exact, stepName, callback) {
            var uid = Lampa.Storage.get('lampac_unic_id', '');
            var apiUrl = JACRED_PROTOCOL + JACRED_URL + '/api/v1.0/torrents?search=' + 
                         encodeURIComponent(searchTitle) + 
                         '&year=' + searchYear + 
                         '&apikey=' + JACRED_API_KEY +
                         (exact ? '&exact=true' : '') +
                         '&uid=' + uid;
        
            if (Q_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", quality: JacRed: " + stepName + " URL: " + apiUrl);
        
            new Lampa.Reguest().silent(apiUrl, function(response) {
                if (!response) {
                    if (Q_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", quality: JacRed: " + stepName + " failed");
                    callback(null);
                    return;
                }
        
                try {
                    var torrents = typeof response === 'string' ? JSON.parse(response) : response;
                    if (!Array.isArray(torrents) || torrents.length === 0) {
                        callback(null);
                        return;
                    }
        
                    var bestQuality = -1;
                    var bestTorrent = null;
                    var findStopWords = false;
                    var searchYearNum = parseInt(searchYear, 10);
                        
                    // Закомментированная функция извлечения качества из названия (ES5) - ОСТАВЛЯЕМ ДЛЯ БУДУЩЕГО
                    /*
                    function extractQuality(title) {
                        if (!title) return 0;
                        var lower = title.toLowerCase();
                        if (/2160p/.test(lower)) return 2160;
                        if (/1080p/.test(lower)) return 1080;
                        if (/720p/.test(lower)) return 720;
                        return 480;
                    }
                    */
                    
                    // Закомментированная функция извлечения года из названия - ОСТАВЛЯЕМ ДЛЯ БУДУЩЕГО
                    /*
                    function extractYear(title) {
                        if (!title) return 0;
                        
                        var regex = /(?:^|[^\d])(\d{4})(?:[^\d]|$)/g;
                        var match;
                        var lastYear = 0;
                        var currentYear = new Date().getFullYear();
                        
                        while ((match = regex.exec(title)) !== null) {
                            var year = parseInt(match[1], 10);
                            if (year >= 1900 && year <= currentYear + 1) {
                                lastYear = year;
                            }
                        }
                        
                        return lastYear;
                    }
                    */
        
                    for (var i = 0; i < torrents.length; i++) {
                        var t = torrents[i];
                        var usedQuality = t.quality;
                        var usedYear = t.relased;
                        var qualitySource = "original";
                        var yearSource = "original";
                        var yearStatus = "valid";
                        
                        // Обработка качества: если оригинальное качество 0 - пропускаем
                        if (typeof t.quality !== 'number' || t.quality === 0) {
                            // Временное отключение парсинга качества
                            /*
                            var extractedQuality = extractQuality(t.title);
                            if (extractedQuality > 0) {
                                usedQuality = extractedQuality;
                                qualitySource = "extracted";
                            } else */
                            continue; // Пропускаем релизы без качества
                        }
                        
                        // Обработка года: если оригинальный год невалиден - пропускаем
                        var yearValid = false;
                        var parsedYear = 0;
                        
                        if (usedYear && !isNaN(usedYear)) {
                            parsedYear = parseInt(usedYear, 10);
                            if (parsedYear > 1900) {
                                yearValid = true;
                            }
                        }
                        
                        // Временное отключение парсинга года из названия
                        /*
                        if (!yearValid) {
                            parsedYear = extractYear(t.title);
                            if (parsedYear > 0) {
                                usedYear = parsedYear;
                                yearSource = "extracted";
                                yearValid = true;
                            } else {
                                yearStatus = "missing";
                            }
                        }
                        */
                        
                        if (!yearValid) {
                            yearStatus = "invalid/missing";
                            continue; // Пропускаем релизы без года
                        }
                        
                        // Проверка соответствия года (если год известен)
                        if (yearValid) {
                            if (!isNaN(searchYearNum)) {
                                if (parsedYear === searchYearNum) {
                                    yearStatus = "match (" + parsedYear + " vs " + searchYearNum + ")";
                                } else {
                                    yearStatus = "mismatch (" + parsedYear + " vs " + searchYearNum + ")";
                                    continue; // Пропускаем торренты с несоответствующим годом
                                }
                            } else {
                                yearStatus = "no_search_year";
                            }
                        }
                        
                        // Проверка на screen copy
                        if (isScreenCopy(t.title)) {
                            findStopWords = true;
                            continue;
                        }
                        
                        // Детальное логирование для отладки
                        if (Q_LOGGING) {
                            console.log(
                                "MAXSM-RATINGS", 
                                "card: " + localCurrentCard + 
                                ", Torrent: " + t.title +
                                " | Q: " + usedQuality + " (" + qualitySource + ")" +
                                " | Y: " + parsedYear + " (" + yearSource + ")" +
                                " | Status: " + yearStatus +
                                " | Step: " + stepName
                            );
                        }
                        
                        if (usedQuality === MAX_QUALITY) {
                            if (Q_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", quality: JacRed: Found MAX quality in " + stepName);
                            callback({
                                quality: usedQuality,
                                title: t.title
                            });
                            return;
                        }
                        
                        if (usedQuality > bestQuality) {
                            bestQuality = usedQuality;
                            bestTorrent = t;
                        }
                    }
        
                    if (bestTorrent) {
                        if (Q_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", quality: JacRed: Found in " + stepName + ": torrent: " + bestTorrent.title + " quality: " + bestQuality + "p");
                        callback({
                            quality: bestQuality,
                            title: bestTorrent.title
                        });
                    } else {
                        if (findStopWords) {
                            callback({
                                quality: "TS",
                                title: "NOT SAVED"
                            });                            
                        } else {
                            callback(null);
                        }
                    }
                } catch (e) {
                    if (Q_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", quality: JacRed: " + stepName + " error: " + e.message);
                    callback(null);
                }
            });
        }
        
        // Последовательные стратегии поиска
        var searchStrategies = [];
        
        // Стратегия 1: По original_title (точное совпадение)
        if (normalizedCard.original_title && (hasLetters(normalizedCard.original_title) || onlyDigits(normalizedCard.original_title))) {
            if (Q_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", quality: Strategy added: OriginalTitle Exact Year");
            searchStrategies.push({
                title: normalizedCard.original_title.trim(),
                year: year,
                exact: true,
                name: "OriginalTitle Exact Year"
            });
        }
        
        // Стратегия 2: По original_title (точное совпадение) -1год
        if (normalizedCard.original_title && (hasLetters(normalizedCard.original_title) || onlyDigits(normalizedCard.original_title))) {
            if (Q_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", quality: Strategy added: OriginalTitle Exact Year-1");
            searchStrategies.push({
                title: normalizedCard.original_title.trim(),
                year: String(Number(year) - 1),
                exact: true,
                name: "OriginalTitle Exact Year-1"
            });
        }
        
        // Стратегия 3: По title (точное совпадение)
        if (normalizedCard.title && (hasLetters(normalizedCard.title) || onlyDigits(normalizedCard.title))) {
            if (Q_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", quality: Strategy added: Title Exact Year");
            searchStrategies.push({
                title: normalizedCard.title.trim(),
                year: year,
                exact: true,
                name: "Title Exact Year"
            });
        }
        
        // Стратегия 4: По title (точное совпадение) -1год
        if (normalizedCard.title && (hasLetters(normalizedCard.title) || onlyDigits(normalizedCard.title))) {
            if (Q_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", quality: Strategy added: Title Exact Year-1");
            searchStrategies.push({
                title: normalizedCard.title.trim(),
                year: String(Number(year) - 1),
                exact: true,
                name: "Title Exact Year-1"
            });
        }
        
        // Рекурсивная проверка стратегий
        function tryNextStrategy(index) {
            if (index >= searchStrategies.length) {
                if (Q_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", quality: JacRed: All strategies failed");
                callback(null);
                return;
            }
            
            var strategy = searchStrategies[index];
            if (Q_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", quality: JacRed: Trying " + strategy.name);
            
            searchJacred(strategy.title, strategy.year, strategy.exact, strategy.name, function(result) {
                if (result !== null) {
                    // ДОБАВЛЕН ЛОГ С НАЗВАНИЕМ РАЗДАЧИ
                    // if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", quality: JacRed: Selected torrent: \"" + result.title + "\"");
                    callback({ quality: result.quality + "p" });
                } else {
                    tryNextStrategy(index + 1);
                }
            });
        }
        
        // Запуск первой стратегии
        if (searchStrategies.length > 0) {
            tryNextStrategy(0);
        } else {
            if (Q_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", quality: JacRed: No valid titles");
            callback(null);
        }
    }
// ------------------------------------------------------------END--JacRed-------------------------------------------------------------------------     
    // Функции работы с качеством
    // Удаляем качество с карточки если есть
    function clearQualityElements(localCurrentCard, render) {
        if (render) $('.full-start__status.maxsm-quality', render).remove();
    }
    // Плейсхолдер качества
    function showQualityPlaceholder(localCurrentCard, render) {
        if (!render) return;
        
        var rateLine = $('.full-start-new__rate-line', render);
        if (!rateLine.length) return;
        
        // Проверяем, не добавлен ли уже плейсхолдер
        if (!$('.full-start__status.maxsm-quality', render).length) {
            var placeholder = document.createElement('div');
            placeholder.className = 'full-start__status maxsm-quality';
            placeholder.textContent = '...';
            placeholder.style.opacity = '0.7';
            rateLine.append(placeholder);
        } 
    }
    // Получаем касество
    function fetchQualitySequentially(normalizedCard, localCurrentCard, cacheKey, render) {
        if (Q_LOGGING) console.log('MAXSM-RATINGS', ' card: ' + localCurrentCard + ', quality: Starting JacRed request');
        getBestReleaseFromJacred(normalizedCard, localCurrentCard, function(jrResult) {
            if (Q_LOGGING) console.log('MAXSM-RATINGS', ' card: ' + localCurrentCard + ', quality: JacRed callback received');
            var quality = (jrResult && jrResult.quality) || null;
            if (quality && quality !== 'NO') {
                if (Q_LOGGING) console.log('MAXSM-RATINGS', ' card: ' + localCurrentCard + ', quality: JacRed found quality: ' + quality);
                saveQualityCache(cacheKey, { quality: quality }, localCurrentCard);
                updateQualityElement(quality, localCurrentCard, render);
                return;
            }
            clearQualityElements(localCurrentCard, render);
        });
    }
    // Обновляем качество в карточке
    function updateQualityElement(quality, localCurrentCard, render) {
        if (!render) return;
        var element = $('.full-start__status.maxsm-quality', render);
        var rateLine = $('.full-start-new__rate-line', render);
        if (!rateLine.length) return;
        
        var displayQuality = translateQuality(quality);
        
        if (element.length) {
            if (Q_LOGGING) console.log('MAXSM-RATINGS', ' card: ' + localCurrentCard + ', quality: Updating existing element with quality "' + quality + '" (displayed as "' + displayQuality + '")');
            element.text(displayQuality).css('opacity', '1');
        } else {
            if (Q_LOGGING) console.log('MAXSM-RATINGS', ' card: ' + localCurrentCard + ', quality: Creating new element with quality "' + quality + '" (displayed as "' + displayQuality + '")');
            var div = document.createElement('div');
            div.className = 'full-start__status maxsm-quality';
            div.textContent = displayQuality;
            rateLine.append(div);
        }
    }

    // Основная функция
    function fetchAdditionalRatings(card, render) {
        if (!render) return;
        var localCurrentCard = card.id; 
        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Start - card data: ", card);
        
        var normalizedCard = {
            id: card.id,
            tmdb: card.vote_average || null,
            kinopoisk_id: card.kinopoisk_id,
            imdb_id: card.imdb_id || card.imdb || null,
            title: card.title || card.name || '',
            original_title: card.original_title || card.original_name || '',
            type: getCardType(card),
            release_date: card.release_date || card.first_air_date || ''
        };
        
        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", imdb id: " + normalizedCard.imdb_id + " title: " + normalizedCard.title + " orig: " + normalizedCard.original_title + " type: " + normalizedCard.type + " date: " + normalizedCard.release_date);
        
        var rateLine = $('.full-start-new__rate-line', render);
        if (rateLine.length) {
            rateLine.css('visibility', 'hidden');
            rateLine.addClass('done'); 
            addLoadingAnimation(localCurrentCard, render);
        }
        
        var cacheKey = normalizedCard.type + '_' + (normalizedCard.imdb_id || normalizedCard.id);
        var cachedData = getOmdbCache(cacheKey);
        var cachedKpData = getKpCache(cacheKey);
        var cacheQualityData = getQualityCache(cacheKey);
        var ratingsData = {};
        
        // Оптимищируем ли запросы 1 - экономия, 0 - точность (не избегаем запросов ксли на карточке есть IMDb и KP)
        var optimize = parseInt(localStorage.getItem('maxsm_ratings_optimize'));

        // Статусы рейтингов
        var kpElement = $('.rate--kp:not(.hide)', render);
        var imdbElement = $('.rate--imdb:not(.hide)', render);
        
        // Проверяем, что оба рейтинга уже есть и содержат числовые значения
        var kpExists = kpElement.length > 0 && !!kpElement.find('> div').eq(0).text().trim();
        var imdbExists = imdbElement.length > 0 && !!imdbElement.find('> div').eq(0).text().trim();
            // Асинхронно ищем качество 
            if (localStorage.getItem('maxsm_ratings_quality') === 'true' && !(localStorage.getItem('maxsm_ratings_quality_tv') === 'false' && normalizedCard.type === 'tv')) {
                if (Q_LOGGING) console.log('MAXSM-RATINGS', ' card: ' + localCurrentCard + ', quality: Start quality');
                // 1. Обрабатываем кеш качества
                if (cacheQualityData) {
                    if (Q_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", quality: Get Quality data from cache");
                    updateQualityElement(cacheQualityData.quality, localCurrentCard, render);
                } else {
                    clearQualityElements(localCurrentCard, render);
                    showQualityPlaceholder(localCurrentCard, render);
                    fetchQualitySequentially(normalizedCard, localCurrentCard, cacheKey, render);
                }
            } 
        
        // Если есть оба - пропускаем запрос к KP API, если оптимизация
        if (kpExists && imdbExists && optimize === 1) {
            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Skip KP ratings, allrady in card and optimize = 1");
            processNextStep();
            return;
        }
                
        // 1. Обрабатываем кеш Кинопоиска
        if (cachedKpData) {
            ratingsData.kp = cachedKpData.kp;
            ratingsData.imdb_kp = cachedKpData.imdb; 
            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Get KP ratings from cache");
            processNextStep();
        } else {
            getKPRatings(normalizedCard, getRandomToken(KP_API_KEYS), localCurrentCard, function(kpRatings) {
                if (kpRatings) {
                    if (kpRatings.kinopoisk) {
                        ratingsData.kp = kpRatings.kinopoisk;
                    }
                    if (kpRatings.imdb) {
                        ratingsData.imdb_kp = kpRatings.imdb; // если хочешь сохранить отдельно, или сравнить
                    }
                    saveKpCache(cacheKey, { kp: kpRatings.kinopoisk, imdb: kpRatings.imdb }, localCurrentCard);
                }
                processNextStep();
            });
            return; // Выходим, продолжим в колбэке
        }
        
        function processNextStep() {

            updateHiddenElements(ratingsData, localCurrentCard, render);
            // 2. Обрабатываем кеш OMDB
            if (cachedData) {
                ratingsData.rt = cachedData.rt;
                ratingsData.mc = cachedData.mc;
                ratingsData.imdb = cachedData.imdb;
                ratingsData.ageRating = cachedData.ageRating;
                ratingsData.oscars = cachedData.oscars;
                ratingsData.emmy = cachedData.emmy;
                ratingsData.awards = cachedData.awards;
                if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Get OMDB ratings from cache");
                updateUI();
            } else if (normalizedCard.imdb_id) {
                fetchOmdbRatings(normalizedCard, cacheKey, localCurrentCard, render, function(omdbData) {
                    if (omdbData) {
                        ratingsData.rt = omdbData.rt;
                        ratingsData.mc = omdbData.mc;
                        ratingsData.imdb = omdbData.imdb;
                        ratingsData.ageRating = omdbData.ageRating;
                        ratingsData.oscars = omdbData.oscars;
                        ratingsData.emmy = omdbData.emmy;
                        ratingsData.awards = omdbData.awards;
                        saveOmdbCache(cacheKey, omdbData, localCurrentCard);
                    }
                    updateUI();
                });
            } else {
                getImdbIdFromTmdb(normalizedCard.id, normalizedCard.type, localCurrentCard, function(newImdbId) {
                    if (newImdbId) {
                        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", imdb id is: " + newImdbId);
                        normalizedCard.imdb_id = newImdbId;
                        cacheKey = normalizedCard.type + '_' + newImdbId;
                        fetchOmdbRatings(normalizedCard, cacheKey, localCurrentCard, render, function(omdbData) {
                            if (omdbData) {
                                ratingsData.rt = omdbData.rt;
                                ratingsData.mc = omdbData.mc;
                                ratingsData.imdb = omdbData.imdb;
                                ratingsData.ageRating = omdbData.ageRating;
                                ratingsData.oscars = omdbData.oscars;
                                ratingsData.emmy = omdbData.emmy;
                                ratingsData.awards = omdbData.awards;
                                saveOmdbCache(cacheKey, omdbData, localCurrentCard);
                            }
                            updateUI();
                        });
                    } else {
                        updateUI();
                    }
                });
            }
        }

        function updateUI() {
            // Вставляем рейтинги RT и MC
            insertRatings(ratingsData.rt, ratingsData.mc, ratingsData.oscars, ratingsData.awards, ratingsData.emmy, localCurrentCard, render);
            
            // Обновляем скрытые элементы
            updateHiddenElements(ratingsData, localCurrentCard, render);
            
            var mode = parseInt(localStorage.getItem('maxsm_ratings_mode'), 10);
            var isPortrait = window.innerHeight > window.innerWidth;
            if (isPortrait) mode = 1;
            
            // Считаем и отображаем средний рейтинг
            if (mode !== 2)
                calculateAverageRating(localCurrentCard, render);
            
            //Меняем лейблы на иконки если надо
            var showIcons = localStorage.getItem('maxsm_ratings_icons')  === 'true';
            if (showIcons) insertIcons(localCurrentCard, render);
            
            // Убираем анимацию и возвращаем строку рейтингов     
            removeLoadingAnimation(localCurrentCard, render);
            rateLine.css('visibility', 'visible');
            
            // Добавляем обработчик для портретного режима
            if (isPortrait) {
                var rateElement = $('.full-start__rate', render);
                rateElement.off('click.ratings-modal').on('click.ratings-modal', function(e) {
                    e.stopPropagation();
                    showRatingsModal(localCurrentCard, render);
                });
            }
            
            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", RATE DONE");
       }
    }
    
//-------------------------------------------MODALKA---------------------------------------------------------
    function showRatingsModal(cardId, render) {
        // Проверяем настройку цветов
        var showColors = localStorage.getItem('maxsm_ratings_colors') === 'true';
        
        // Создаем контейнер для модального окна
        var modalContent = $('<div class="maxsm-modal-ratings"></div>');
        
        // Находим строку рейтингов
        var rateLine = $('.full-start-new__rate-line', render);
        if (!rateLine.length) return;
        
        // Порядок отображения рейтингов
        var ratingOrder = [
            'rate--avg',
            'rate--oscars',
            'rate--emmy',
            'rate--awards',
            'rate--tmdb',
            'rate--imdb',
            'rate--kp',
            'rate--rt',
            'rate--mc'
        ];
        
        // Собираем рейтинги в нужном порядке
        ratingOrder.forEach(function(className) {
            var element = $('.' + className, rateLine);
            if (element.length) {
                // Берем значение из первого дочернего элемента
                var value = element.children().eq(0).text().trim();
                var numericValue = parseFloat(value);
                
                // Определяем название рейтинга
                var label = '';
                switch(className) {
                    case 'rate--avg': 
                        label = Lampa.Lang.translate("maxsm_ratings_mode");
                        break;
                    case 'rate--oscars': 
                        label = Lampa.Lang.translate("maxsm_ratings_oscars");
                        break;
                    case 'rate--emmy': 
                        label = Lampa.Lang.translate("maxsm_ratings_emmy");
                        break;
                    case 'rate--awards': 
                        label = Lampa.Lang.translate("maxsm_ratings_awards");
                        break;
                    case 'rate--tmdb': 
                        label = 'TMDB';
                        break;
                    case 'rate--imdb': 
                        label = 'IMDb';
                        break;
                    case 'rate--kp': 
                        label = 'Кинопоиск';
                        break;
                    case 'rate--rt': 
                        label = 'Rotten Tomatoes';
                        break;
                    case 'rate--mc': 
                        label = 'Metacritic';
                        break;
                }
                
                // Создаем элемент строки с префиксными классами
                var item = $('<div class="maxsm-modal-rating-line"></div>');
                // Применяем цветовые классы если включена настройка
                if (showColors) {                
                var colorClass;
                    // Для среднего рейтинга используем специальную функцию
                    if (className === 'rate--avg') {
                        colorClass = getRatingClass(numericValue);
                        if (colorClass) {
                            item.addClass(colorClass);
                        }
                    }
                    // Для остальных рейтингов используем префиксные классы
                    else {
                        colorClass = 'maxsm-modal-' + className.replace('rate--', '');
                        item.addClass(colorClass);
                    }
                }
                item.text(value + ' - ' + label);
                modalContent.append(item);
            }
        });
        
        // Создаем модальное окно
        Lampa.Modal.open({
            title: Lampa.Lang.translate("maxsm_ratings_avg_simple"),
            html: modalContent,
            width: 600,
            onBack: function() {
                Lampa.Modal.close();
            }
        });
    }
//------------------------------------------------------------------------------------------------------------------------
    //Меняем лейблы на иконки
    function insertIcons(localCurrentCard, render) {
        // var render = Lampa.Activity.active().activity.render();
        if (!render) return;   
        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Insert icons");       
        // if (!stillHere(localCurrentCard)) return;
        
        function replaceIcon(className, svg) {
            var Element = $('.' + className, render);
            //var Element = $('.' + className);
            if (Element.length) {
                var sourceNameElement = Element.find('.source--name');
                if (sourceNameElement.length) {
                    sourceNameElement.html(svg).addClass('rate--icon');
                    if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Insert " + className);
                } else {
                    // Если не нашли .source--name, пробуем найти второй дочерний div
                    var childDivs = Element.children('div');
                    if (childDivs.length >= 2) {
                        $(childDivs[1]).html(svg).addClass('rate--icon');
                        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Insert " + className);
                    }
                }
            }
        }
        
        replaceIcon('rate--imdb', imdb_svg);
        replaceIcon('rate--kp', kp_svg);
        replaceIcon('rate--tmdb', tmdb_svg);
        replaceIcon('rate--oscars', oscars_svg);
        replaceIcon('rate--emmy', emmy_svg);
        replaceIcon('rate--awards', awards_svg);
        replaceIcon('rate--rt', rt_svg);
        replaceIcon('rate--mc', mc_svg);
        replaceIcon('rate--avg', avg_svg);
    }
    
    // Функции работы с кешем
    function getOmdbCache(key) {
        var cache = Lampa.Storage.get(OMDB_CACHE) || {};
        var item = cache[key];
        return item && (Date.now() - item.timestamp < CACHE_TIME) ? item : null;
    }

    function saveOmdbCache(key, data, localCurrentCard) {
        // Оптимищируем ли запросы 1 - экономия, 0 - точность (Сохраняем в кеш на N  дней и пустые результаты)
        var optimize = parseInt(localStorage.getItem('maxsm_ratings_optimize'));
        
        // Проверяем валидные рейтинги
        var hasValidRating = (
            (data.rt && data.rt !== "N/A") ||
            (data.mc && data.mc !== "N/A") ||
            (data.imdb && data.imdb !== "N/A")
        );
        
        // Проверяем валидный возрастной рейтинг
        var hasValidAgeRating = (
            data.ageRating && 
            data.ageRating !== "N/A" && 
            data.ageRating !== "Not Rated"
        );
        
        // Также считаем наличие Оскаров поводом кешировать
        var hasOscars = typeof data.oscars === 'number' && data.oscars > 0;
        var hasEmmy = typeof data.emmy === 'number' && data.emmy > 0;
        var hasAwards = typeof data.awards === 'number' && data.awards > 0;

        if (optimize === 0 && !hasValidRating && !hasValidAgeRating && !hasOscars && !hasEmmy && !hasAwards) return;
        
        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Save OMDB cache");
        
        var cache = Lampa.Storage.get(OMDB_CACHE) || {};
        cache[key] = { 
            rt: data.rt,
            mc: data.mc,
            imdb: data.imdb,
            ageRating: data.ageRating,
            oscars: data.oscars || null,
            emmy: data.emmy || null,
            awards: data.awards || null,
            timestamp: Date.now() 
        };
        Lampa.Storage.set(OMDB_CACHE, cache);
    }

    // Функции для работы с кешем Кинопоиска
    function getKpCache(key) {
        var cache = Lampa.Storage.get(KP_CACHE) || {};
        var item = cache[key];
        return item && (Date.now() - item.timestamp < CACHE_TIME) ? item : null;
    }
    
    function saveKpCache(key, data, localCurrentCard) {
        // Оптимищируем ли запросы 1 - экономия, 0 - точность (Сохраняем в кеш на N  дней и пустые результаты)
        var optimize = parseInt(localStorage.getItem('maxsm_ratings_optimize'));
        
        if (optimize === 0 && (!data || (!data.kp && !data.imdb))) return;
        
        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Save KP cache");
    
        var cache = Lampa.Storage.get(KP_CACHE) || {};
    
        cache[key] = {
            kp: data.kp || null,
            imdb: data.imdb || null,
            timestamp: Date.now()
        };
    
        Lampa.Storage.set(KP_CACHE, cache);
    }
    
    // Функции для работы с кешем качества
    function getQualityCache(key) {
        var cache = Lampa.Storage.get(QUALITY_CACHE) || {};
        var item = cache[key];
        return item && (Date.now() - item.timestamp < CACHE_TIME) ? item : null;
    }
    
    function saveQualityCache(key, data, localCurrentCard) {
        return; /*
        if (Q_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", quality: Save quality cache");
    
        var cache = Lampa.Storage.get(QUALITY_CACHE) || {};
    
        cache[key] = {
            quality: data.quality || null,
            timestamp: Date.now()
        };
    
        Lampa.Storage.set(QUALITY_CACHE, cache); */
    }
    
    // Получаем IMDB id из TMDB id по API
    function getImdbIdFromTmdb(tmdbId, type, localCurrentCard, callback) {
        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Get IMDb id From TMDB");
        if (!tmdbId) {
            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", TMDB id is empty - aborting");
            return callback(null);
        }
        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Get IMDb id From TMDB for id:" + tmdbId);
        
        var cleanType = type === 'movie' ? 'movie' : 'tv';
        var cacheKey = cleanType + '_' + tmdbId;
        var cache = Lampa.Storage.get(ID_MAPPING_CACHE) || {};
        
        if (cache[cacheKey] && (Date.now() - cache[cacheKey].timestamp < CACHE_TIME)) {
            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", find in cache imdb id is: " + cache[cacheKey].imdb_id);
            return callback(cache[cacheKey].imdb_id);
        }
        else if (cache[cacheKey]) {
            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", cached entry expired for: " + cacheKey);
        }
    
        // Формируем основной URL с использованием Lampa.TMDB.api()
        var mainPath = cleanType + '/' + tmdbId + '/external_ids?api_key=' + Lampa.TMDB.key();
        var mainUrl = Lampa.TMDB.api(mainPath);
        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", formed main API URL: " + mainUrl);
    
        // Используем только silent запрос
        new Lampa.Reguest().silent(mainUrl, function(data) {
            if (data && data.imdb_id) {
                if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", received IMDb id: " + data.imdb_id);
                cache[cacheKey] = {
                    imdb_id: data.imdb_id,
                    timestamp: Date.now()
                };
                Lampa.Storage.set(ID_MAPPING_CACHE, cache);
                callback(data.imdb_id);
            } else {
                if (C_LOGGING) {
                    console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", no IMDb id in main response");
                    if (data) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", main response data:", data);
                }
                
                if (cleanType === 'tv') {
                    if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", trying alternative TV method");
                    
                    // Формируем альтернативный URL для TV
                    var altPath = 'tv/' + tmdbId + '?api_key=' + Lampa.TMDB.key();
                    var altUrl = Lampa.TMDB.api(altPath);
                    if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", formed alternative API URL: " + altUrl);
                    
                    new Lampa.Reguest().silent(altUrl, function(altData) {
                        var imdbId = (altData && altData.external_ids && altData.external_ids.imdb_id) || null;
                        if (imdbId) {
                            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", alternative method found IMDb: " + imdbId);
                            cache[cacheKey] = {
                                imdb_id: imdbId,
                                timestamp: Date.now()
                            };
                            Lampa.Storage.set(ID_MAPPING_CACHE, cache);
                        } else {
                            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", alternative method NO IMDb id");
                        }
                        callback(imdbId);
                    }, function() {
                        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", alternative request failed");
                        callback(null);
                    });
                } else {
                    if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", not TV type - skipping alternative");
                    callback(null);
                }
            }
        }, function(xhr) {
            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", main request failed. Status: " + (xhr ? xhr.status : 'unknown'));
            callback(null);
        });
    }
    
    // Модифицируем fetchOmdbRatings для поддержки callback
    function fetchOmdbRatings(card, cacheKey, localCurrentCard, render, callback) {
        //var render = Lampa.Activity.active().activity.render();
        if (!render) return;   
        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Fetch OMDB ratings");        
        // Статусы рейтингов
        var pgElement = $('.full-start__pg:not(.hide)', render);
        var imdbElement = $('.rate--imdb:not(.hide)', render);
        
        // Проверяем, что оба рейтинга уже есть и содержат числовые значения
        var pgExists = pgElement.length > 0 && !!pgElement.text().trim();
        var imdbExists = imdbElement.length > 0 && !!imdbElement.find('> div').eq(0).text().trim();
        
        if (!card.imdb_id) {
            callback(null);
            return;
        }
        
        var url = 'https://www.omdbapi.com/?apikey=' + getRandomToken(OMDB_API_KEYS) + '&i=' + card.imdb_id;
        
        new Lampa.Reguest().silent(url, function(data) {
            if (data && data.Response === 'True' && (data.Ratings || data.imdbRating)) {
                if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Got OMDB ratings from API");
                var parsedAwards = parseAwards(data.Awards || '', localCurrentCard);
                callback({
                    rt: extractRating(data.Ratings, 'Rotten Tomatoes'),
                    mc: extractRating(data.Ratings, 'Metacritic'),
                    imdb: data.imdbRating || null,
                    ageRating: data.Rated || null,
                    oscars: parsedAwards.oscars,
                    emmy: parsedAwards.emmy,
                    awards: parsedAwards.awards
                });
            } else {
                if (data && data.Response === 'False' && data.Error) {
                    if (C_LOGGING) console.warn("MAXSM-RATINGS", "card: " + localCurrentCard + ", OMDB error: " + data.Error);
                }
                callback(null);
            }
        }, function() {
            if (C_LOGGING) console.warn("MAXSM-RATINGS", "card: " + localCurrentCard + ", OMDB request failed");
            callback(null);
        });
    }
    
    function updateHiddenElements(ratings, localCurrentCard, render) {
        // var render = Lampa.Activity.active().activity.render();
        if (!render) return;
        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Update hidden elements");        
        //if (!stillHere(localCurrentCard)) return;
        
        // Обновление возрастного рейтинга с проверкой "Not Rated"
         var pgElement = $('.full-start__pg.hide', render);
        //var pgElement = $('.full-start__pg.hide');
        if (pgElement.length && ratings.ageRating) {
            var invalidRatings = ['N/A', 'Not Rated', 'Unrated', 'NR'];
            var isValid = invalidRatings.indexOf(ratings.ageRating) === -1;
            
            if (isValid) {
                if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Insert PG");
                var localizedRating = AGE_RATINGS[ratings.ageRating] || ratings.ageRating;
                pgElement.removeClass('hide').text(localizedRating);
            }
        }
        
        // Заполняем IMDb рейтинга
        var imdbElement = $('.rate--imdb', render);
        if (imdbElement.length) {
            var imdbRating;
            if (ratings.imdb && !isNaN(ratings.imdb)) {
                if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Insert IMDB from OMDB");
                imdbRating = parseFloat(ratings.imdb).toFixed(1);
                imdbElement.removeClass('hide').find('> div').eq(0).text(imdbRating);
            }
            else if (ratings.imdb_kp && !isNaN(ratings.imdb_kp)) {
                if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Insert IMDB from KP");
                imdbRating = parseFloat(ratings.imdb_kp).toFixed(1);
                imdbElement.removeClass('hide').find('> div').eq(0).text(imdbRating);
            }
        }
        
        var kpElement = $('.rate--kp', render);
        if (kpElement.length && ratings.kp && !isNaN(ratings.kp)) {
            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Insert KP");
            var kpRating = parseFloat(ratings.kp).toFixed(1);
            kpElement.removeClass('hide').find('> div').eq(0).text(kpRating);
        }
    }
    
    // Вспомогательные функции
    function extractRating(ratings, source) {
        if (!ratings || !Array.isArray(ratings)) return null;
        
        for (var i = 0; i < ratings.length; i++) {
            if (ratings[i].Source === source) {
                try {
                    return source === 'Rotten Tomatoes' 
                        ? parseFloat(ratings[i].Value.replace('%', '')) 
                        : parseFloat(ratings[i].Value.split('/')[0]);
                } catch(e) {
                    console.warn('Ошибка при парсинге рейтинга:', e);
                    return null;
                }
            }
        }
        return null;
    }
    
    function insertRatings(rtRating, mcRating, oscars, awards, emmy, localCurrentCard, render) {
        //if (!stillHere(localCurrentCard)) return;
        //var render = Lampa.Activity.active().activity.render();
        if (!render) return;
        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Insert OMDB ratings");  
        
        var rateLine = $('.full-start-new__rate-line', render);
        if (!rateLine.length) return;

        var lastRate = $('.full-start__rate:last', rateLine);
        
        var showRT = localStorage.getItem('maxsm_ratings_critic')  === 'true';
        var showMC = localStorage.getItem('maxsm_ratings_critic')  === 'true';
        var showAwards = localStorage.getItem('maxsm_ratings_awards') === 'true';
        var showOscar =  localStorage.getItem('maxsm_ratings_awards')  === 'true';
        var showColors = localStorage.getItem('maxsm_ratings_colors')  === 'true';    
        var showEmmy = localStorage.getItem('maxsm_ratings_awards')  === 'true';
        
        var elemLabel;
        
        if (showRT && rtRating && !isNaN(rtRating) && !$('.rate--rt', rateLine).length) {
            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Insert Tomatoes");
            var rtElement = $(
                '<div class="full-start__rate rate--rt">' +
                    '<div>' + rtRating + '</div>' +
                    '<div class="source--name">Tomatoes</div>' +
                '</div>'
            );
            
            if (lastRate.length) {
                rtElement.insertAfter(lastRate);
            } else {
                rateLine.prepend(rtElement);
            }
        }
    
        if (showMC && mcRating && !isNaN(mcRating) && !$('.rate--mc', rateLine).length) {
            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Insert Metacritic");
            var insertAfter = $('.rate--rt', rateLine).length ? $('.rate--rt', rateLine) : lastRate;
            var mcElement = $(
                '<div class="full-start__rate rate--mc">' +
                    '<div>' + mcRating + '</div>' +
                    '<div class="source--name">Metacritic</div>' +
                '</div>'
            );
            
            if (insertAfter.length) {
                mcElement.insertAfter(insertAfter);
            } else {
                rateLine.prepend(mcElement);
            }
        }

        if (showAwards && awards && !isNaN(awards) && awards > 0 && !$('.rate--awards', rateLine).length) {
            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Insert Awards");
            var awardsElement = $(
                '<div class="full-start__rate rate--awards rate--gold">' +
                    '<div>' + awards + '</div>' +
                    '<div class="source--name">' + Lampa.Lang.translate("maxsm_ratings_awards") + '</div>' +
                '</div>'
            );
            if (!showColors) { 
                awardsElement.removeClass('rate--gold'); 
            }
            rateLine.prepend(awardsElement); // Просто вставляем в начало
        }
    
        if (showOscar && oscars && !isNaN(oscars) && oscars > 0 && !$('.rate--oscars', rateLine).length) {
            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Insert Oscars");
            var oscarsElement = $(
                '<div class="full-start__rate rate--oscars rate--gold">' +
                    '<div>' + oscars + '</div>' +
                    '<div class="source--name">' + Lampa.Lang.translate("maxsm_ratings_oscars") + '</div>' +
                '</div>'
            );
            if (!showColors) { 
                oscarsElement.removeClass('rate--gold'); 
            }
            rateLine.prepend(oscarsElement); // Просто вставляем в начало
        }
        
        if (showEmmy && emmy && !isNaN(emmy) && emmy > 0 && !$('.rate--emmy', rateLine).length) {
            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Insert Emmy");
            var emmyElement = $(
                '<div class="full-start__rate rate--emmy rate--gold">' +
                    '<div>' + emmy + '</div>' +
                    '<div class="source--name">' + Lampa.Lang.translate("maxsm_ratings_emmy") + '</div>' +
                '</div>'
            );
            if (!showColors) { 
                emmyElement.removeClass('rate--gold'); 
            }
            rateLine.prepend(emmyElement); // Просто вставляем в начало
        }
    }
    
    function calculateAverageRating(localCurrentCard, render) {
        //var render = Lampa.Activity.active().activity.render();
        if (!render) return;
        if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Calculate avarage rating");   
        
        //if (!stillHere(localCurrentCard)) return;
    
        var rateLine = $('.full-start-new__rate-line', render);
        if (!rateLine.length) return;
    
        var ratings = {
            imdb: parseFloat($('.rate--imdb div:first', rateLine).text()) || 0,
            tmdb: parseFloat($('.rate--tmdb div:first', rateLine).text()) || 0,
            kp: parseFloat($('.rate--kp div:first', rateLine).text()) || 0,
            mc: (parseFloat($('.rate--mc div:first', rateLine).text()) || 0) / 10,
            rt: (parseFloat($('.rate--rt div:first', rateLine).text()) || 0) / 10
        };
    
        var totalWeight = 0;
        var weightedSum = 0;
        var ratingsCount = 0;
        
        for (var key in ratings) {
            if (ratings.hasOwnProperty(key) && !isNaN(ratings[key]) && ratings[key] > 0) {
                weightedSum += ratings[key] * WEIGHTS[key];
                totalWeight += WEIGHTS[key];
                ratingsCount++;
            }
        }
    
        $('.rate--avg', rateLine).remove();
        
        var mode = parseInt(localStorage.getItem('maxsm_ratings_mode'), 10);
        var isPortrait = window.innerHeight > window.innerWidth;
        if (isPortrait) mode = 1;
        
        if (totalWeight > 0 && (ratingsCount > 1 ||  mode === 1)) {
            var averageRating = ( weightedSum / totalWeight ).toFixed(1);
            var colorClass = getRatingClass(averageRating);
            
            if (C_LOGGING) console.log("MAXSM-RATINGS", "card: " + localCurrentCard + ", Average rating: " + averageRating);
            
            var avgLabel = Lampa.Lang.translate("maxsm_ratings_avg");
            
            if (mode === 1) {
                avgLabel = Lampa.Lang.translate("maxsm_ratings_avg_simple");
                $('.full-start__rate', rateLine).not('.rate--oscars, .rate--avg, .rate--awards').hide();
            } 

            var avgElement = $(
                '<div class="full-start__rate rate--avg ' + colorClass + '">' +
                    '<div>' + averageRating + '</div>' +
                    '<div class="source--name">' + avgLabel + '</div>' +
                '</div>'
            );

            var showColors = localStorage.getItem('maxsm_ratings_colors')  === 'true';
            
            if (!showColors) { 
                avgElement.removeClass(colorClass); 
            }
            
            $('.full-start__rate:first', rateLine).before(avgElement);
        }

    }
    
    // Лепим на карточки ярлыки качества (через получение с JacRed)
    function updateCards(cards) {
        for (var i = 0; i < cards.length; i++) {
            var card = cards[i];
            if (card.hasAttribute('data-quality-added')) continue;
            
            var cardView = card.querySelector('.card__view');
            if (localStorage.getItem('maxsm_ratings_quality_tv') === 'false') {
                if (cardView) {
                    var typeElements = cardView.getElementsByClassName('card__type');
                    if (typeElements.length > 0) continue;
                }
            }
           
    
            (function(currentCard) {
                var data = currentCard.card_data;
                if (!data) return;
                
                if (CARDLIST_LOGGING) console.log("MAXSM-RATINGS", "CARDLIST: card data: ", data);
                
                var normalizedCard = {
                    id: data.id || '',
                    title: data.title || data.name || '',
                    original_title: data.original_title || data.original_name || '',
                    release_date: data.release_date || data.first_air_date || ''
                };     
                
                var localCurrentCard = normalizedCard.id;
                
                getBestReleaseFromJacred(normalizedCard, localCurrentCard, function(jrResult) {
                    if (CARDLIST_LOGGING) console.log('MAXSM-RATINGS', ' card: ' + localCurrentCard + ', CARDLIST: JacRed callback received');
                    var quality = (jrResult && jrResult.quality) || null;
                    
                    if (!document.body.contains(currentCard)) {
                        if (CARDLIST_LOGGING) console.log('MAXSM-RATINGS', 'Card removed from DOM:', localCurrentCard);
                        return;
                    }
                    
                    currentCard.setAttribute('data-quality-added', 'true');
                    
                    var cardView = currentCard.querySelector('.card__view');
                    var qualityElements = null;
                    
                    if (quality && quality !== 'NO') {
                        if (CARDLIST_LOGGING) console.log('MAXSM-RATINGS', ' card: ' + localCurrentCard + ', CARDLIST: JacRed found quality: ' + quality);

                        if (cardView) {
                            var hasQuality = false;
                            qualityElements = cardView.getElementsByClassName('card__quality');
                            if (qualityElements.length > 0) hasQuality = true;
                            var qualityDiv;
                            var innerElement;
                            var qualityInner;
                            if (!hasQuality) {
                                qualityDiv = document.createElement('div');
                                qualityDiv.className = 'card__quality';
                                qualityInner = document.createElement('div');
                                qualityInner.textContent = translateQuality(quality);
                                qualityDiv.appendChild(qualityInner);
                                cardView.appendChild(qualityDiv);
                            } else {
                                // Обновляем текст в существующем элементе
                                qualityDiv = qualityElements[0];
                                innerElement = qualityDiv.firstElementChild;
                                
                                if (innerElement) {
                                    innerElement.textContent = translateQuality(quality);
                                } else {
                                    // На случай, если структура нарушена (нет вложенного элемента)
                                    qualityInner = document.createElement('div');
                                    qualityInner.textContent = translateQuality(quality);
                                    qualityDiv.innerHTML = ''; // Очищаем содержимое
                                    qualityDiv.appendChild(qualityInner);
                                }
                            }
                        }
                    } else {
                                if (cardView) {
                                    qualityElements = cardView.getElementsByClassName('card__quality');
                                    // Создаем статичную копию коллекции для безопасного удаления
                                    var elementsToRemove = Array.prototype.slice.call(qualityElements);
                                    for (var i = 0; i < elementsToRemove.length; i++) {
                                        var el = elementsToRemove[i];
                                        if (el.parentNode) {
                                            el.parentNode.removeChild(el);
                                        }
                                    }
                                }
                            }
                });
            })(card);
        }
    }
    
    // Обсервер DOM для новых карт
    var observer = new MutationObserver(function(mutations) {
        var newCards = [];
        for (var m = 0; m < mutations.length; m++) {
            var mutation = mutations[m];
            if (mutation.addedNodes) {
                for (var j = 0; j < mutation.addedNodes.length; j++) {
                    var node = mutation.addedNodes[j];
                    if (node.nodeType !== 1) continue;
                    
                    if (node.classList && node.classList.contains('card')) {
                        newCards.push(node);
                    }
                    
                    var nestedCards = node.querySelectorAll('.card');
                    for (var k = 0; k < nestedCards.length; k++) {
                        newCards.push(nestedCards[k]);
                    }
                }
            }
        }
        
        if (newCards.length) updateCards(newCards);
    });
        
    // Инициализация плагина
    function startPlugin() {
        if (C_LOGGING) console.log("MAXSM-RATINGS", " Hello!"); 
        window.maxsmRatingsPlugin = true;
        
        if (!localStorage.getItem('maxsm_ratings_awards')) {
            localStorage.setItem('maxsm_ratings_awards', 'true');
        }
        if (!localStorage.getItem('maxsm_ratings_critic')) {
            localStorage.setItem('maxsm_ratings_critic', 'true');
        }
        if (!localStorage.getItem('maxsm_ratings_colors')) {
            localStorage.setItem('maxsm_ratings_colors', 'true');
        }
        
        if (!localStorage.getItem('maxsm_ratings_icons')) {
            localStorage.setItem('maxsm_ratings_icons', 'true');
        }
    
        if (!localStorage.getItem('maxsm_ratings_mode')) {
            localStorage.setItem('maxsm_ratings_mode', '0');
        }
        
        if (!localStorage.getItem('maxsm_ratings_quality')) {
            localStorage.setItem('maxsm_ratings_quality', 'true');
        }  
        
        if (!localStorage.getItem('maxsm_ratings_optimize')) {
            localStorage.setItem('maxsm_ratings_optimize', '1');
        }  
        
        if (!localStorage.getItem('maxsm_ratings_quality_inlist')) {
            localStorage.setItem('maxsm_ratings_quality_inlist', 'true');
        }  
        
        if (!localStorage.getItem('maxsm_ratings_quality_tv')) {
            localStorage.setItem('maxsm_ratings_quality_tv', 'false');
        }  
        
        Lampa.SettingsApi.addComponent({
            component: "maxsm_ratings",
            name: Lampa.Lang.translate("maxsm_ratings"),
            icon: star_svg
        });

        // Создание объекта для значений выбора режима
        var modeValue = {};
        modeValue[0] = Lampa.Lang.translate("maxsm_ratings_mode_normal");
        modeValue[1] = Lampa.Lang.translate("maxsm_ratings_mode_simple");
        modeValue[2] = Lampa.Lang.translate("maxsm_ratings_mode_noavg");
        
        var isPortrait = window.innerHeight > window.innerWidth;
        if (!isPortrait) {
            Lampa.SettingsApi.addParam({
                component: "maxsm_ratings",
                param: {
                    name: "maxsm_ratings_mode",
                    type: 'select',
                    values: modeValue,
                    default: 0
                },
                field: {
                    name: Lampa.Lang.translate("maxsm_ratings_mode"),
                    description: ''
                },
                onChange: function(value) {
    
                }
            });
        }
        
        // Создание объекта для значений выбора режима
        var optimizeValue = {};
        optimizeValue[0] = Lampa.Lang.translate("maxsm_ratings_optimize_accuracy");   // optimize = 0 - точность 
        optimizeValue[1] = Lampa.Lang.translate("maxsm_ratings_optimize_efficiency"); // optimize = 1 - экономия 
        
        Lampa.SettingsApi.addParam({
            component: "maxsm_ratings",
            param: {
                name: "maxsm_ratings_optimize",
                type: 'select',
                values: optimizeValue,
                default: 1
            },
            field: {
                name: Lampa.Lang.translate("maxsm_ratings_optimize"),
                description: ''
            },
            onChange: function(value) {

            }
        });

        Lampa.SettingsApi.addParam({
            component: "maxsm_ratings",
            param: {
                name: "maxsm_ratings_awards",
                type: "trigger",
                default: true
            },
            field: {
                name: Lampa.Lang.translate("maxsm_ratings_awards"),
                description: ''
            },
            onChange: function(value) {
            }
        });
        
        Lampa.SettingsApi.addParam({
            component: "maxsm_ratings",
            param: {
                name: "maxsm_ratings_critic",
                type: "trigger",
                default: true
            },
            field: {
                name: Lampa.Lang.translate("maxsm_ratings_critic"),
                description: ''
            },
            onChange: function(value) {
            }
        });
        
        Lampa.SettingsApi.addParam({
            component: "maxsm_ratings",
            param: {
                name: "maxsm_ratings_colors",
                type: "trigger",
                default: true
            },
            field: {
                name: Lampa.Lang.translate("maxsm_ratings_colors"),
                description: ''
            },
            onChange: function(value) {
            }
        });
        
        Lampa.SettingsApi.addParam({
            component: "maxsm_ratings",
            param: {
                name: "maxsm_ratings_icons",
                type: "trigger",
                default: true
            },
            field: {
                name: Lampa.Lang.translate("maxsm_ratings_icons"),
                description: ''
            },
            onChange: function(value) {
            }
        });
        
        Lampa.SettingsApi.addParam({
            component: "maxsm_ratings",
            param: {
                name: "maxsm_ratings_quality",
                type: "trigger",
                default: true
            },
            field: {
                name: Lampa.Lang.translate("maxsm_ratings_quality"),
                description: ''
            },
            onChange: function(value) {
            }
        });
        
        Lampa.SettingsApi.addParam({
            component: "maxsm_ratings",
            param: {
                name: "maxsm_ratings_quality_inlist",
                type: "trigger",
                default: true
            },
            field: {
                name: Lampa.Lang.translate("maxsm_ratings_quality_inlist"),
                description: ''
            },
            onChange: function(value) {
                console.log('MAXSM-RATINGS: observer value' + value);
                if (value === 'true') {
                    observer.observe(document.body, { childList: true, subtree: true });
                    console.log('MAXSM-RATINGS: observer Start');
                } else {
                    observer.disconnect();
                    console.log('MAXSM-RATINGS: observer Stop');
                }
            }
        });
        
        Lampa.SettingsApi.addParam({
            component: "maxsm_ratings",
            param: {
                name: "maxsm_ratings_quality_tv",
                type: "trigger",
                default: false
            },
            field: {
                name: Lampa.Lang.translate("maxsm_ratings_quality_tv"),
                description: ''
            },
            onChange: function(value) {
            }
        });
        
        Lampa.SettingsApi.addParam({
            component: 'maxsm_ratings',
            param: {
                name: 'maxsm_ratings_cc',
                type: 'button'
            },
            field: {
                name: Lampa.Lang.translate('maxsm_ratings_cc')
            },
            onChange: function() {
                localStorage.removeItem(OMDB_CACHE);
                localStorage.removeItem(KP_CACHE);
                localStorage.removeItem(ID_MAPPING_CACHE);
                localStorage.removeItem(QUALITY_CACHE);
                window.location.reload();
            }
        });
        
        if (localStorage.getItem('maxsm_ratings_quality_inlist') === 'true') {
            // Вызов наблюдателя
            observer.observe(document.body, { childList: true, subtree: true });
            console.log('MAXSM-RATINGS: observer Start');
        }
        
        // Попадания внутри карточки
		Lampa.Listener.follow('full', function (e) {
			if (e.type == 'complite') {
				var render = e.object.activity.render();
				globalCurrentCard = e.data.movie.id;
                fetchAdditionalRatings(e.data.movie, render);
			}
		});
    }

    if (!window.maxsmRatingsPlugin) startPlugin();
})();